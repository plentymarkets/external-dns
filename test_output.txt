=== RUN   TestAmbassadorSource
    suite.go:234: warning: no tests to run
=== RUN   TestAmbassadorSource/Interface
--- PASS: TestAmbassadorSource (0.00s)
    --- PASS: TestAmbassadorSource/Interface (0.00s)
=== RUN   TestAmbassadorHostSource
=== PAUSE TestAmbassadorHostSource
=== RUN   TestParseAmbLoadBalancerService
--- PASS: TestParseAmbLoadBalancerService (0.00s)
=== RUN   TestRouteSource
    suite.go:234: warning: no tests to run
=== RUN   TestRouteSource/Interface
--- PASS: TestRouteSource (0.00s)
    --- PASS: TestRouteSource/Interface (0.00s)
=== RUN   TestConnectorSource
=== PAUSE TestConnectorSource
=== RUN   TestHTTPProxy
=== PAUSE TestHTTPProxy
=== RUN   TestNewContourHTTPProxySource
=== PAUSE TestNewContourHTTPProxySource
=== RUN   TestCRDSource
    suite.go:234: warning: no tests to run
=== RUN   TestCRDSource/Interface
=== RUN   TestCRDSource/Endpoints
=== RUN   TestCRDSource/Endpoints/invalid_crd_api_version
=== PAUSE TestCRDSource/Endpoints/invalid_crd_api_version
=== RUN   TestCRDSource/Endpoints/invalid_crd_kind
=== PAUSE TestCRDSource/Endpoints/invalid_crd_kind
=== RUN   TestCRDSource/Endpoints/endpoints_within_a_specific_namespace
=== PAUSE TestCRDSource/Endpoints/endpoints_within_a_specific_namespace
=== RUN   TestCRDSource/Endpoints/no_endpoints_within_a_specific_namespace
=== PAUSE TestCRDSource/Endpoints/no_endpoints_within_a_specific_namespace
=== RUN   TestCRDSource/Endpoints/invalid_crd_with_no_targets
=== PAUSE TestCRDSource/Endpoints/invalid_crd_with_no_targets
=== RUN   TestCRDSource/Endpoints/valid_crd_gvk_with_single_endpoint
=== PAUSE TestCRDSource/Endpoints/valid_crd_gvk_with_single_endpoint
=== RUN   TestCRDSource/Endpoints/valid_crd_gvk_with_multiple_endpoints
=== PAUSE TestCRDSource/Endpoints/valid_crd_gvk_with_multiple_endpoints
=== RUN   TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_non_matching_annotation_filter
=== PAUSE TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_non_matching_annotation_filter
=== RUN   TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_matching_annotation_filter
=== PAUSE TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_matching_annotation_filter
=== RUN   TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_non_matching_label_filter
=== PAUSE TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_non_matching_label_filter
=== RUN   TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_matching_label_filter
=== PAUSE TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_matching_label_filter
=== RUN   TestCRDSource/Endpoints/Create_NS_record
=== PAUSE TestCRDSource/Endpoints/Create_NS_record
=== RUN   TestCRDSource/Endpoints/Create_SRV_record
=== PAUSE TestCRDSource/Endpoints/Create_SRV_record
=== RUN   TestCRDSource/Endpoints/Create_NAPTR_record
=== PAUSE TestCRDSource/Endpoints/Create_NAPTR_record
=== RUN   TestCRDSource/Endpoints/illegal_target_CNAME
=== PAUSE TestCRDSource/Endpoints/illegal_target_CNAME
=== RUN   TestCRDSource/Endpoints/illegal_target_NAPTR
=== PAUSE TestCRDSource/Endpoints/illegal_target_NAPTR
=== CONT  TestCRDSource/Endpoints/invalid_crd_api_version
=== CONT  TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_matching_annotation_filter
=== CONT  TestCRDSource/Endpoints/invalid_crd_with_no_targets
=== CONT  TestCRDSource/Endpoints/no_endpoints_within_a_specific_namespace
=== CONT  TestCRDSource/Endpoints/Create_SRV_record
=== CONT  TestCRDSource/Endpoints/illegal_target_NAPTR
=== CONT  TestCRDSource/Endpoints/illegal_target_CNAME
=== CONT  TestCRDSource/Endpoints/Create_NAPTR_record
=== CONT  TestCRDSource/Endpoints/valid_crd_gvk_with_multiple_endpoints
=== CONT  TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_non_matching_annotation_filter
=== CONT  TestCRDSource/Endpoints/valid_crd_gvk_with_single_endpoint
=== CONT  TestCRDSource/Endpoints/endpoints_within_a_specific_namespace
=== CONT  TestCRDSource/Endpoints/invalid_crd_kind
=== CONT  TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_matching_label_filter
=== CONT  TestCRDSource/Endpoints/Create_NS_record
=== CONT  TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_non_matching_label_filter
--- PASS: TestCRDSource (0.00s)
    --- PASS: TestCRDSource/Interface (0.00s)
    --- PASS: TestCRDSource/Endpoints (0.00s)
        --- PASS: TestCRDSource/Endpoints/invalid_crd_api_version (0.00s)
        --- PASS: TestCRDSource/Endpoints/invalid_crd_kind (0.00s)
        --- PASS: TestCRDSource/Endpoints/no_endpoints_within_a_specific_namespace (0.00s)
        --- PASS: TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_non_matching_annotation_filter (0.00s)
        --- PASS: TestCRDSource/Endpoints/endpoints_within_a_specific_namespace (0.00s)
        --- PASS: TestCRDSource/Endpoints/Create_SRV_record (0.00s)
        --- PASS: TestCRDSource/Endpoints/valid_crd_gvk_with_annotation_and_matching_annotation_filter (0.00s)
        --- PASS: TestCRDSource/Endpoints/valid_crd_gvk_with_single_endpoint (0.00s)
        --- PASS: TestCRDSource/Endpoints/Create_NS_record (0.00s)
        --- PASS: TestCRDSource/Endpoints/valid_crd_gvk_with_multiple_endpoints (0.00s)
        --- PASS: TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_matching_label_filter (0.00s)
        --- PASS: TestCRDSource/Endpoints/illegal_target_NAPTR (0.00s)
        --- PASS: TestCRDSource/Endpoints/illegal_target_CNAME (0.00s)
        --- PASS: TestCRDSource/Endpoints/invalid_crd_with_no_targets (0.00s)
        --- PASS: TestCRDSource/Endpoints/valid_crd_gvk_with_label_and_non_matching_label_filter (0.00s)
        --- PASS: TestCRDSource/Endpoints/Create_NAPTR_record (0.00s)
=== RUN   TestDedup
=== RUN   TestDedup/Endpoints
=== RUN   TestDedup/Endpoints/one_endpoint_returns_one_endpoint
=== RUN   TestDedup/Endpoints/two_different_endpoints_return_two_endpoints
=== RUN   TestDedup/Endpoints/two_endpoints_with_same_dnsname_and_different_targets_return_two_endpoints
=== RUN   TestDedup/Endpoints/two_endpoints_with_different_dnsname_and_same_target_return_two_endpoints
=== RUN   TestDedup/Endpoints/two_endpoints_with_same_dnsname_and_same_target_return_one_endpoint
--- PASS: TestDedup (0.00s)
    --- PASS: TestDedup/Endpoints (0.00s)
        --- PASS: TestDedup/Endpoints/one_endpoint_returns_one_endpoint (0.00s)
        --- PASS: TestDedup/Endpoints/two_different_endpoints_return_two_endpoints (0.00s)
        --- PASS: TestDedup/Endpoints/two_endpoints_with_same_dnsname_and_different_targets_return_two_endpoints (0.00s)
        --- PASS: TestDedup/Endpoints/two_endpoints_with_different_dnsname_and_same_target_return_two_endpoints (0.00s)
        --- PASS: TestDedup/Endpoints/two_endpoints_with_same_dnsname_and_same_target_return_one_endpoint (0.00s)
=== RUN   TestEmptySourceReturnsEmpty
--- PASS: TestEmptySourceReturnsEmpty (0.00s)
=== RUN   TestF5VirtualServerEndpoints
=== PAUSE TestF5VirtualServerEndpoints
=== RUN   TestFakeSourceReturnsTenEndpoints
--- PASS: TestFakeSourceReturnsTenEndpoints (0.00s)
=== RUN   TestFakeEndpointsBelongToDomain
--- PASS: TestFakeEndpointsBelongToDomain (0.00s)
=== RUN   TestFakeEndpointsResolveToIPAddresses
--- PASS: TestFakeEndpointsResolveToIPAddresses (0.00s)
=== RUN   TestGatewayGRPCRouteSourceEndpoints
=== PAUSE TestGatewayGRPCRouteSourceEndpoints
=== RUN   TestGatewayHTTPRouteSourceEndpoints
=== PAUSE TestGatewayHTTPRouteSourceEndpoints
=== RUN   TestGatewayTCPRouteSourceEndpoints
=== PAUSE TestGatewayTCPRouteSourceEndpoints
=== RUN   TestGatewayMatchingHost
=== RUN   TestGatewayMatchingHost/ipv4-rejected
=== RUN   TestGatewayMatchingHost/ipv6-rejected
=== RUN   TestGatewayMatchingHost/empty-matches-empty
=== RUN   TestGatewayMatchingHost/empty-matches-nonempty
=== RUN   TestGatewayMatchingHost/simple-match
=== RUN   TestGatewayMatchingHost/wildcard-matches-longer
=== RUN   TestGatewayMatchingHost/wildcard-matches-equal-length
=== RUN   TestGatewayMatchingHost/wildcard-matches-multiple-subdomains
=== RUN   TestGatewayMatchingHost/wildcard-doesnt-match-parent
=== RUN   TestGatewayMatchingHost/wildcard-must-be-complete-label
--- PASS: TestGatewayMatchingHost (0.00s)
    --- PASS: TestGatewayMatchingHost/ipv4-rejected (0.00s)
    --- PASS: TestGatewayMatchingHost/ipv6-rejected (0.00s)
    --- PASS: TestGatewayMatchingHost/empty-matches-empty (0.00s)
    --- PASS: TestGatewayMatchingHost/empty-matches-nonempty (0.00s)
    --- PASS: TestGatewayMatchingHost/simple-match (0.00s)
    --- PASS: TestGatewayMatchingHost/wildcard-matches-longer (0.00s)
    --- PASS: TestGatewayMatchingHost/wildcard-matches-equal-length (0.00s)
    --- PASS: TestGatewayMatchingHost/wildcard-matches-multiple-subdomains (0.00s)
    --- PASS: TestGatewayMatchingHost/wildcard-doesnt-match-parent (0.00s)
    --- PASS: TestGatewayMatchingHost/wildcard-must-be-complete-label (0.00s)
=== RUN   TestGatewayMatchingProtocol
=== RUN   TestGatewayMatchingProtocol/protocol-matches-lis-https-route-http
=== RUN   TestGatewayMatchingProtocol/protocol-match-invalid-list-https-route-tcp
=== RUN   TestGatewayMatchingProtocol/protocol-match-valid-lis-tls-route-tls
=== RUN   TestGatewayMatchingProtocol/protocol-match-valid-lis-TLS-route-TCP
=== RUN   TestGatewayMatchingProtocol/protocol-match-valid-lis-TLS-route-TCP#01
--- PASS: TestGatewayMatchingProtocol (0.00s)
    --- PASS: TestGatewayMatchingProtocol/protocol-matches-lis-https-route-http (0.00s)
    --- PASS: TestGatewayMatchingProtocol/protocol-match-invalid-list-https-route-tcp (0.00s)
    --- PASS: TestGatewayMatchingProtocol/protocol-match-valid-lis-tls-route-tls (0.00s)
    --- PASS: TestGatewayMatchingProtocol/protocol-match-valid-lis-TLS-route-TCP (0.00s)
    --- PASS: TestGatewayMatchingProtocol/protocol-match-valid-lis-TLS-route-TCP#01 (0.00s)
=== RUN   TestIsDNS1123Domain
=== RUN   TestIsDNS1123Domain/empty
=== RUN   TestIsDNS1123Domain/label-too-long
=== RUN   TestIsDNS1123Domain/domain-too-long
=== RUN   TestIsDNS1123Domain/hostname
=== RUN   TestIsDNS1123Domain/domain
=== RUN   TestIsDNS1123Domain/subdomain
=== RUN   TestIsDNS1123Domain/dashes
=== RUN   TestIsDNS1123Domain/dash-prefix
=== RUN   TestIsDNS1123Domain/dash-suffix
=== RUN   TestIsDNS1123Domain/underscore
=== RUN   TestIsDNS1123Domain/plus
=== RUN   TestIsDNS1123Domain/brackets
=== RUN   TestIsDNS1123Domain/parens
=== RUN   TestIsDNS1123Domain/wild
--- PASS: TestIsDNS1123Domain (0.00s)
    --- PASS: TestIsDNS1123Domain/empty (0.00s)
    --- PASS: TestIsDNS1123Domain/label-too-long (0.00s)
    --- PASS: TestIsDNS1123Domain/domain-too-long (0.00s)
    --- PASS: TestIsDNS1123Domain/hostname (0.00s)
    --- PASS: TestIsDNS1123Domain/domain (0.00s)
    --- PASS: TestIsDNS1123Domain/subdomain (0.00s)
    --- PASS: TestIsDNS1123Domain/dashes (0.00s)
    --- PASS: TestIsDNS1123Domain/dash-prefix (0.00s)
    --- PASS: TestIsDNS1123Domain/dash-suffix (0.00s)
    --- PASS: TestIsDNS1123Domain/underscore (0.00s)
    --- PASS: TestIsDNS1123Domain/plus (0.00s)
    --- PASS: TestIsDNS1123Domain/brackets (0.00s)
    --- PASS: TestIsDNS1123Domain/parens (0.00s)
    --- PASS: TestIsDNS1123Domain/wild (0.00s)
=== RUN   TestGatewayTLSRouteSourceEndpoints
=== PAUSE TestGatewayTLSRouteSourceEndpoints
=== RUN   TestGatewayUDPRouteSourceEndpoints
=== PAUSE TestGatewayUDPRouteSourceEndpoints
=== RUN   TestGlooSource
=== PAUSE TestGlooSource
=== RUN   TestIngress
=== PAUSE TestIngress
=== RUN   TestNewIngressSource
=== PAUSE TestNewIngressSource
=== RUN   TestGateway
=== PAUSE TestGateway
=== RUN   TestNewIstioGatewaySource
=== PAUSE TestNewIstioGatewaySource
=== RUN   TestVirtualService
=== PAUSE TestVirtualService
=== RUN   TestNewIstioVirtualServiceSource
=== PAUSE TestNewIstioVirtualServiceSource
=== RUN   TestVirtualServiceSourceGetGateway
=== RUN   TestVirtualServiceSourceGetGateway/EmptyGateway
=== RUN   TestVirtualServiceSourceGetGateway/MeshGateway
=== RUN   TestVirtualServiceSourceGetGateway/MissingGateway
=== RUN   TestVirtualServiceSourceGetGateway/InvalidGatewayStr
=== RUN   TestVirtualServiceSourceGetGateway/ExistingGateway
=== RUN   TestVirtualServiceSourceGetGateway/ErrorGettingGateway
    istio_virtualservice_test.go:2218: 
        	Error Trace:	/Users/tiberiucozan/IdeaProjects/external-dns/source/istio_virtualservice_test.go:2218
        	Error:      	An error is expected but got nil.
        	Test:       	TestVirtualServiceSourceGetGateway/ErrorGettingGateway
        	Messages:   	getGateway(context.TODO, foo/bar, &{{ } {gateway  error    0 0001-01-01 00:00:00 +0000 UTC <nil> <nil> map[] map[] [] [] []} {{{} [] [] <nil>} 0 [] [] [] [] [] [] []} {{{} [] [] <nil>} 0 [] [] [] 0}})
--- FAIL: TestVirtualServiceSourceGetGateway (0.61s)
    --- PASS: TestVirtualServiceSourceGetGateway/EmptyGateway (0.00s)
    --- PASS: TestVirtualServiceSourceGetGateway/MeshGateway (0.00s)
    --- PASS: TestVirtualServiceSourceGetGateway/MissingGateway (0.00s)
    --- PASS: TestVirtualServiceSourceGetGateway/InvalidGatewayStr (0.00s)
    --- PASS: TestVirtualServiceSourceGetGateway/ExistingGateway (0.00s)
    --- FAIL: TestVirtualServiceSourceGetGateway/ErrorGettingGateway (0.00s)
=== RUN   TestKongTCPIngressEndpoints
=== PAUSE TestKongTCPIngressEndpoints
=== RUN   TestMultiSource
=== PAUSE TestMultiSource
=== RUN   TestNodeSource
=== PAUSE TestNodeSource
=== RUN   TestOcpRouteSource
=== PAUSE TestOcpRouteSource
=== RUN   TestPodSource
=== PAUSE TestPodSource
=== RUN   TestServiceSource
=== PAUSE TestServiceSource
=== RUN   TestClusterIpServices
=== PAUSE TestClusterIpServices
=== RUN   TestServiceSourceNodePortServices
=== PAUSE TestServiceSourceNodePortServices
=== RUN   TestHeadlessServices
=== PAUSE TestHeadlessServices
=== RUN   TestHeadlessServicesHostIP
=== PAUSE TestHeadlessServicesHostIP
=== RUN   TestExternalServices
=== PAUSE TestExternalServices
=== RUN   TestEndpointsFromRouteGroups
=== PAUSE TestEndpointsFromRouteGroups
=== RUN   TestRouteGroupsEndpoints
=== RUN   TestRouteGroupsEndpoints/Empty_routegroup_should_return_empty_endpoints
=== RUN   TestRouteGroupsEndpoints/Single_routegroup_should_return_endpoints
=== RUN   TestRouteGroupsEndpoints/Single_routegroup_with_combineFQDNAnnotation_with_fqdn_template_should_return_endpoints_from_fqdnTemplate_and_routegroup
=== RUN   TestRouteGroupsEndpoints/Single_routegroup_without,_with_fqdn_template_should_return_endpoints_from_fqdnTemplate
=== RUN   TestRouteGroupsEndpoints/Single_routegroup_without_combineFQDNAnnotation_with_fqdn_template_should_return_endpoints_not_from_fqdnTemplate
=== RUN   TestRouteGroupsEndpoints/Single_routegroup_with_TTL_should_return_endpoint_with_TTL
=== RUN   TestRouteGroupsEndpoints/Routegroup_with_hosts_and_mixed_destinations_creates_endpoints
=== RUN   TestRouteGroupsEndpoints/multiple_routegroups_should_return_endpoints
=== RUN   TestRouteGroupsEndpoints/multiple_routegroups_with_filter_annotations_should_return_only_filtered_endpoints
=== RUN   TestRouteGroupsEndpoints/multiple_routegroups_with_set_operation_annotation_filter_should_return_only_filtered_endpoints
=== RUN   TestRouteGroupsEndpoints/multiple_routegroups_with_controller_annotation_filter_should_not_return_filtered_endpoints
--- PASS: TestRouteGroupsEndpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Empty_routegroup_should_return_empty_endpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Single_routegroup_should_return_endpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Single_routegroup_with_combineFQDNAnnotation_with_fqdn_template_should_return_endpoints_from_fqdnTemplate_and_routegroup (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Single_routegroup_without,_with_fqdn_template_should_return_endpoints_from_fqdnTemplate (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Single_routegroup_without_combineFQDNAnnotation_with_fqdn_template_should_return_endpoints_not_from_fqdnTemplate (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Single_routegroup_with_TTL_should_return_endpoint_with_TTL (0.00s)
    --- PASS: TestRouteGroupsEndpoints/Routegroup_with_hosts_and_mixed_destinations_creates_endpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/multiple_routegroups_should_return_endpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/multiple_routegroups_with_filter_annotations_should_return_only_filtered_endpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/multiple_routegroups_with_set_operation_annotation_filter_should_return_only_filtered_endpoints (0.00s)
    --- PASS: TestRouteGroupsEndpoints/multiple_routegroups_with_controller_annotation_filter_should_not_return_filtered_endpoints (0.00s)
=== RUN   TestResourceLabelIsSet
--- PASS: TestResourceLabelIsSet (0.00s)
=== RUN   TestDualstackLabelIsSet
--- PASS: TestDualstackLabelIsSet (0.00s)
=== RUN   TestParseTemplate
=== RUN   TestParseTemplate/invalid_template
=== RUN   TestParseTemplate/valid_empty_template
=== RUN   TestParseTemplate/valid_template
=== RUN   TestParseTemplate/valid_template#01
=== RUN   TestParseTemplate/valid_template#02
=== RUN   TestParseTemplate/non-empty_annotation_filter_label
--- PASS: TestParseTemplate (0.00s)
    --- PASS: TestParseTemplate/invalid_template (0.00s)
    --- PASS: TestParseTemplate/valid_empty_template (0.00s)
    --- PASS: TestParseTemplate/valid_template (0.00s)
    --- PASS: TestParseTemplate/valid_template#01 (0.00s)
    --- PASS: TestParseTemplate/valid_template#02 (0.00s)
    --- PASS: TestParseTemplate/non-empty_annotation_filter_label (0.00s)
=== RUN   TestGetTTLFromAnnotations
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_not_present
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_not_a_number
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_empty
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_negative_number
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_too_high
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_set_correctly_using_integer
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_set_correctly_using_duration_(whole)
=== RUN   TestGetTTLFromAnnotations/TTL_annotation_value_is_set_correctly_using_duration_(fractional)
--- PASS: TestGetTTLFromAnnotations (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_not_present (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_not_a_number (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_empty (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_negative_number (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_too_high (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_set_correctly_using_integer (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_set_correctly_using_duration_(whole) (0.00s)
    --- PASS: TestGetTTLFromAnnotations/TTL_annotation_value_is_set_correctly_using_duration_(fractional) (0.00s)
=== RUN   TestSuitableType
--- PASS: TestSuitableType (0.00s)
=== RUN   TestByNames
=== RUN   TestByNames/TestAllInitialized
=== RUN   TestByNames/TestIstioClientFails
=== RUN   TestByNames/TestKubeClientFails
=== RUN   TestByNames/TestOnlyFake
=== RUN   TestByNames/TestSourceNotFound
--- PASS: TestByNames (0.71s)
    --- PASS: TestByNames/TestAllInitialized (0.71s)
    --- PASS: TestByNames/TestIstioClientFails (0.00s)
    --- PASS: TestByNames/TestKubeClientFails (0.00s)
    --- PASS: TestByNames/TestOnlyFake (0.00s)
    --- PASS: TestByNames/TestSourceNotFound (0.00s)
=== RUN   TestEchoSourceReturnGivenSources
--- PASS: TestEchoSourceReturnGivenSources (0.00s)
=== RUN   TestTargetFilterSource
=== PAUSE TestTargetFilterSource
=== RUN   TestTargetFilterSourceImplementsSource
--- PASS: TestTargetFilterSourceImplementsSource (0.00s)
=== RUN   TestTargetFilterSourceEndpoints
=== PAUSE TestTargetFilterSourceEndpoints
=== RUN   TestTraefikProxyIngressRouteEndpoints
=== PAUSE TestTraefikProxyIngressRouteEndpoints
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints
=== RUN   TestTraefikProxyIngressRouteUDPEndpoints
=== PAUSE TestTraefikProxyIngressRouteUDPEndpoints
=== RUN   TestTraefikProxyOldIngressRouteEndpoints
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints
=== RUN   TestTraefikProxyOldIngressRouteUDPEndpoints
=== PAUSE TestTraefikProxyOldIngressRouteUDPEndpoints
=== RUN   TestTraefikAPIGroupDisableFlags
=== PAUSE TestTraefikAPIGroupDisableFlags
=== CONT  TestAmbassadorHostSource
=== CONT  TestNodeSource
=== CONT  TestMultiSource
=== RUN   TestMultiSource/Interface
=== RUN   TestNodeSource/NewNodeSource
=== PAUSE TestNodeSource/NewNodeSource
=== CONT  TestTraefikAPIGroupDisableFlags
=== RUN   TestMultiSource/Endpoints
=== RUN   TestMultiSource/Endpoints/no_child_sources_return_no_endpoints
=== RUN   TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_enabled
=== PAUSE TestMultiSource/Endpoints/no_child_sources_return_no_endpoints
=== CONT  TestTraefikProxyOldIngressRouteUDPEndpoints
=== RUN   TestMultiSource/Endpoints/single_empty_child_source_returns_no_endpoints
=== PAUSE TestMultiSource/Endpoints/single_empty_child_source_returns_no_endpoints
=== CONT  TestClusterIpServices
=== RUN   TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation
=== PAUSE TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation
=== CONT  TestEndpointsFromRouteGroups
=== RUN   TestClusterIpServices/hostname_annotated_ClusterIp_services_return_an_endpoint_with_Cluster_IP
=== PAUSE TestClusterIpServices/hostname_annotated_ClusterIp_services_return_an_endpoint_with_Cluster_IP
=== RUN   TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation
=== RUN   TestNodeSource/Endpoints
=== RUN   TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_A
=== PAUSE TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_A
=== RUN   TestEndpointsFromRouteGroups/Empty_routegroup_should_return_empty_endpoints
=== RUN   TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME
=== PAUSE TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME
=== RUN   TestAmbassadorHostSource/Simple_host
=== PAUSE TestAmbassadorHostSource/Simple_host
=== RUN   TestEndpointsFromRouteGroups/Routegroup_without_hosts_and_destinations_create_no_endpoints
=== RUN   TestAmbassadorHostSource/Service_with_load_balancer_hostname
=== PAUSE TestAmbassadorHostSource/Service_with_load_balancer_hostname
=== RUN   TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_AAAA
=== RUN   TestEndpointsFromRouteGroups/Routegroup_without_hosts_create_no_endpoints
=== PAUSE TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_AAAA
=== RUN   TestMultiSource/Endpoints/single_non-empty_child_source_returns_child's_endpoints
=== RUN   TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAMES
=== PAUSE TestMultiSource/Endpoints/single_non-empty_child_source_returns_child's_endpoints
=== PAUSE TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAMES
=== RUN   TestMultiSource/Endpoints/multiple_non-empty_child_sources_returns_merged_children's_endpoints
=== PAUSE TestMultiSource/Endpoints/multiple_non-empty_child_sources_returns_merged_children's_endpoints
=== PAUSE TestNodeSource/Endpoints
=== CONT  TestHeadlessServicesHostIP
=== RUN   TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_two_endpoints_with_the_specified_CNAMES_and_AAAA
=== PAUSE TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_two_endpoints_with_the_specified_CNAMES_and_AAAA
=== RUN   TestAmbassadorHostSource/Service_with_external_IP
=== RUN   TestClusterIpServices/hostname_annotated_ClusterIp_services_are_ignored
=== PAUSE TestAmbassadorHostSource/Service_with_external_IP
=== CONT  TestHeadlessServices
=== RUN   TestAmbassadorHostSource/Host_with_target_annotation
=== PAUSE TestClusterIpServices/hostname_annotated_ClusterIp_services_are_ignored
=== PAUSE TestAmbassadorHostSource/Host_with_target_annotation
=== RUN   TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_are_ignored
=== PAUSE TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_are_ignored
=== RUN   TestEndpointsFromRouteGroups/Routegroup_without_destinations_create_no_endpoints
=== RUN   TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME
=== PAUSE TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME
=== PAUSE TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_enabled
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod
=== RUN   TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_disabled
=== RUN   TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destinations_creates_an_endpoint
=== PAUSE TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_disabled
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod
=== PAUSE TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation
=== RUN   TestAmbassadorHostSource/Host_with_TTL_annotation
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod
=== PAUSE TestAmbassadorHostSource/Host_with_TTL_annotation
=== CONT  TestServiceSourceNodePortServices
=== CONT  TestNewIstioVirtualServiceSource
=== RUN   TestClusterIpServices/non-annotated_ClusterIp_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== PAUSE TestClusterIpServices/non-annotated_ClusterIp_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== RUN   TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation
=== RUN   TestClusterIpServices/Headless_services_do_not_generate_endpoints
=== PAUSE TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation
=== PAUSE TestClusterIpServices/Headless_services_do_not_generate_endpoints
=== RUN   TestEndpointsFromRouteGroups/Routegroup_with_hostname_annotation,_creates_endpoints_from_the_annotation_
=== RUN   TestAmbassadorHostSource/Host_with_provider_specific_annotation
=== PAUSE TestAmbassadorHostSource/Host_with_provider_specific_annotation
=== RUN   TestAmbassadorHostSource/Host_with_missing_Ambassador_annotation
=== PAUSE TestAmbassadorHostSource/Host_with_missing_Ambassador_annotation
=== RUN   TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_enabled
=== RUN   TestNewIstioVirtualServiceSource/invalid_template
=== PAUSE TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_enabled
=== PAUSE TestNewIstioVirtualServiceSource/invalid_template
=== CONT  TestExternalServices
=== RUN   TestClusterIpServices/Headless_services_generate_endpoints_when_target_is_specified
=== PAUSE TestClusterIpServices/Headless_services_generate_endpoints_when_target_is_specified
=== RUN   TestClusterIpServices/ClusterIP_service_with_matching_label_generates_an_endpoint
=== RUN   TestNewIstioVirtualServiceSource/valid_empty_template
=== PAUSE TestClusterIpServices/ClusterIP_service_with_matching_label_generates_an_endpoint
=== PAUSE TestNewIstioVirtualServiceSource/valid_empty_template
=== RUN   TestClusterIpServices/ClusterIP_service_with_matching_label_and_target_generates_a_CNAME_endpoint
=== RUN   TestNewIstioVirtualServiceSource/valid_template
=== PAUSE TestNewIstioVirtualServiceSource/valid_template
=== RUN   TestNewIstioVirtualServiceSource/valid_template#01
=== PAUSE TestNewIstioVirtualServiceSource/valid_template#01
=== RUN   TestExternalServices/external_services_return_an_A_endpoint_for_the_external_name_that_is_an_IPv4_address
=== RUN   TestNewIstioVirtualServiceSource/valid_template#02
=== PAUSE TestExternalServices/external_services_return_an_A_endpoint_for_the_external_name_that_is_an_IPv4_address
=== PAUSE TestNewIstioVirtualServiceSource/valid_template#02
=== PAUSE TestClusterIpServices/ClusterIP_service_with_matching_label_and_target_generates_a_CNAME_endpoint
=== RUN   TestExternalServices/external_services_return_an_AAAA_endpoint_for_the_external_name_that_is_an_IPv6_address
=== RUN   TestClusterIpServices/ClusterIP_service_without_matching_label_generates_an_endpoint
=== PAUSE TestExternalServices/external_services_return_an_AAAA_endpoint_for_the_external_name_that_is_an_IPv6_address
=== PAUSE TestClusterIpServices/ClusterIP_service_without_matching_label_generates_an_endpoint
=== RUN   TestExternalServices/external_services_return_a_CNAME_endpoint_for_the_external_name_that_is_a_domain
=== RUN   TestClusterIpServices/invalid_hostname_does_not_generate_endpoints
=== PAUSE TestExternalServices/external_services_return_a_CNAME_endpoint_for_the_external_name_that_is_a_domain
=== RUN   TestNewIstioVirtualServiceSource/non-empty_annotation_filter_label
=== CONT  TestVirtualService
=== RUN   TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destinations_and_ignoreHostnameAnnotation_creates_endpoints_but_ignores_annotation
=== PAUSE TestNewIstioVirtualServiceSource/non-empty_annotation_filter_label
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod
=== RUN   TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destinations_and_ttl_creates_an_endpoint_with_ttl
=== RUN   TestHeadlessServices/hostname_annotated_Headless_services_are_ignored
=== PAUSE TestHeadlessServices/hostname_annotated_Headless_services_are_ignored
=== CONT  TestNewIngressSource
=== RUN   TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destination_IP_creates_an_endpoint
=== RUN   TestNewIngressSource/invalid_template
=== PAUSE TestNewIngressSource/invalid_template
=== RUN   TestNewIngressSource/valid_empty_template
=== PAUSE TestNewIngressSource/valid_empty_template
=== RUN   TestNewIngressSource/valid_template
=== PAUSE TestNewIngressSource/valid_template
=== RUN   TestNewIngressSource/valid_template#01
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod
=== PAUSE TestClusterIpServices/invalid_hostname_does_not_generate_endpoints
=== CONT  TestNewIstioGatewaySource
=== RUN   TestNewIstioGatewaySource/invalid_template
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod
=== RUN   TestHeadlessServices/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state
=== RUN   TestHeadlessServices/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set
=== RUN   TestHeadlessServices/annotated_Headless_services_return_endpoints_for_pods_missing_hostname
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_endpoints_for_pods_missing_hostname
=== RUN   TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv4_targets
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv4_targets
=== RUN   TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv6_targets
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv6_targets
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_pod_annotation
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_pod_annotation
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_pod_annotation
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_pod_annotation
=== RUN   TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_mixed_destinations_creates_endpoints
--- PASS: TestEndpointsFromRouteGroups (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Empty_routegroup_should_return_empty_endpoints (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_without_hosts_and_destinations_create_no_endpoints (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_without_hosts_create_no_endpoints (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_without_destinations_create_no_endpoints (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destinations_creates_an_endpoint (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_with_hostname_annotation,_creates_endpoints_from_the_annotation_ (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destinations_and_ignoreHostnameAnnotation_creates_endpoints_but_ignores_annotation (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destinations_and_ttl_creates_an_endpoint_with_ttl (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_destination_IP_creates_an_endpoint (0.00s)
    --- PASS: TestEndpointsFromRouteGroups/Routegroup_with_hosts_and_mixed_destinations_creates_endpoints (0.00s)
=== CONT  TestGlooSource
=== CONT  TestKongTCPIngressEndpoints
=== RUN   TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_disabled
=== PAUSE TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_disabled
=== RUN   TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes
=== PAUSE TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes
=== CONT  TestGatewayUDPRouteSourceEndpoints
=== PAUSE TestNewIngressSource/valid_template#01
=== RUN   TestExternalServices/annotated_ExternalName_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets
=== PAUSE TestExternalServices/annotated_ExternalName_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod
=== PAUSE TestNewIstioGatewaySource/invalid_template
=== RUN   TestHeadlessServicesHostIP/hostname_annotated_Headless_services_are_ignored
=== PAUSE TestHeadlessServicesHostIP/hostname_annotated_Headless_services_are_ignored
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod
=== RUN   TestNewIstioGatewaySource/valid_empty_template
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod
=== PAUSE TestNewIstioGatewaySource/valid_empty_template
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod
=== RUN   TestNewIstioGatewaySource/valid_template
=== CONT  TestGateway
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_pods_missing_hostname
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_pods_missing_hostname
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_pods_missing_hostname
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_pods_missing_hostname
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== RUN   TestHeadlessServicesHostIP/annotated_Headless_services_without_a_targetRef_has_no_endpoints
=== PAUSE TestHeadlessServicesHostIP/annotated_Headless_services_without_a_targetRef_has_no_endpoints
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== PAUSE TestNewIstioGatewaySource/valid_template
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== RUN   TestNewIngressSource/valid_template#02
=== RUN   TestNewIstioGatewaySource/valid_template#01
=== PAUSE TestNewIngressSource/valid_template#02
=== RUN   TestExternalServices/annotated_ExternalName_service_with_externalIPs_of_dualstack_addresses_returns_2_endpoints_with_multiple_targets
=== PAUSE TestNewIstioGatewaySource/valid_template#01
=== PAUSE TestExternalServices/annotated_ExternalName_service_with_externalIPs_of_dualstack_addresses_returns_2_endpoints_with_multiple_targets
=== RUN   TestHeadlessServices/annotated_Headless_services_return_dual-stack_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_dual-stack_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_hostIP_if_endpoints-type_annotation_is_set
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_hostIP_if_endpoints-type_annotation_is_set
=== CONT  TestGatewayTCPRouteSourceEndpoints
=== RUN   TestServiceSourceNodePortServices/hostname_annotated_NodePort_services_are_ignored
=== PAUSE TestServiceSourceNodePortServices/hostname_annotated_NodePort_services_are_ignored
=== RUN   TestServiceSourceNodePortServices/non-annotated_NodePort_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== PAUSE TestServiceSourceNodePortServices/non-annotated_NodePort_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== RUN   TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_private_cluster's_nodes
=== RUN   TestNewIngressSource/non-empty_annotation_filter_label
=== CONT  TestGatewayHTTPRouteSourceEndpoints
=== CONT  TestGatewayTLSRouteSourceEndpoints
=== RUN   TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation
=== RUN   TestNewIstioGatewaySource/valid_template#02
=== CONT  TestIngress
=== PAUSE TestNewIstioGatewaySource/valid_template#02
=== PAUSE TestNewIngressSource/non-empty_annotation_filter_label
=== RUN   TestNewIstioGatewaySource/non-empty_annotation_filter_label
=== PAUSE TestNewIstioGatewaySource/non-empty_annotation_filter_label
=== RUN   TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_hostIP_if_endpoints-type_annotation_is_set
=== PAUSE TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_hostIP_if_endpoints-type_annotation_is_set
=== PAUSE TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_private_cluster's_nodes
=== RUN   TestNewIngressSource/non-empty_ingress_class_name_list
=== CONT  TestF5VirtualServerEndpoints
=== CONT  TestGatewayGRPCRouteSourceEndpoints
--- PASS: TestGlooSource (0.00s)
=== PAUSE TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation
=== RUN   TestKongTCPIngressEndpoints/TCPIngress_using_SNI
=== PAUSE TestKongTCPIngressEndpoints/TCPIngress_using_SNI
=== RUN   TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation_and_using_SNI
=== RUN   TestGatewayHTTPRouteSourceEndpoints/GatewayNamespace
=== PAUSE TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation_and_using_SNI
=== PAUSE TestNewIngressSource/non-empty_ingress_class_name_list
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/GatewayNamespace
=== RUN   TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only
=== PAUSE TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only
=== RUN   TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_and_multiple_pods_on_a_single_node_return_an_endpoint_with_unique_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only
=== RUN   TestGatewayHTTPRouteSourceEndpoints/RouteNamespace
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/RouteNamespace
=== RUN   TestGatewayHTTPRouteSourceEndpoints/GatewayLabelFilter
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/GatewayLabelFilter
=== RUN   TestGatewayHTTPRouteSourceEndpoints/RouteLabelFilter
=== PAUSE TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_and_multiple_pods_on_a_single_node_return_an_endpoint_with_unique_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only
=== RUN   TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/RouteLabelFilter
=== PAUSE TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state
=== RUN   TestKongTCPIngressEndpoints/TCPIngress_ignoring_hostname_annotation
=== PAUSE TestKongTCPIngressEndpoints/TCPIngress_ignoring_hostname_annotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/RouteAnnotationFilter
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/RouteAnnotationFilter
=== RUN   TestGatewayHTTPRouteSourceEndpoints/SkipControllerAnnotation
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/SkipControllerAnnotation
=== RUN   TestNewIngressSource/ingress_class_name_and_annotation_filter_jointly_specified
=== PAUSE TestNewIngressSource/ingress_class_name_and_annotation_filter_jointly_specified
=== RUN   TestVirtualService/TestResourceLabelIsSet
=== CONT  TestNewContourHTTPProxySource
=== RUN   TestNewContourHTTPProxySource/invalid_template
=== PAUSE TestNewContourHTTPProxySource/invalid_template
=== RUN   TestNewContourHTTPProxySource/valid_empty_template
=== PAUSE TestNewContourHTTPProxySource/valid_empty_template
=== RUN   TestNewContourHTTPProxySource/valid_template
=== RUN   TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state_&_not_in_Terminating
=== PAUSE TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state_&_not_in_Terminating
=== RUN   TestServiceSourceNodePortServices/access=private_annotation_NodePort_services_return_an_endpoint_with_private_IP_addresses_of_the_cluster's_nodes
=== PAUSE TestServiceSourceNodePortServices/access=private_annotation_NodePort_services_return_an_endpoint_with_private_IP_addresses_of_the_cluster's_nodes
=== RUN   TestServiceSourceNodePortServices/access=public_annotation_NodePort_services_return_an_endpoint_with_public_IP_addresses_of_the_cluster's_nodes
=== PAUSE TestServiceSourceNodePortServices/access=public_annotation_NodePort_services_return_an_endpoint_with_public_IP_addresses_of_the_cluster's_nodes
=== RUN   TestServiceSourceNodePortServices/node_port_services_annotated_DNS_Controller_annotations_return_an_endpoint_where_all_targets_has_the_node_role
=== PAUSE TestNewContourHTTPProxySource/valid_template
=== PAUSE TestServiceSourceNodePortServices/node_port_services_annotated_DNS_Controller_annotations_return_an_endpoint_where_all_targets_has_the_node_role
=== RUN   TestGatewayHTTPRouteSourceEndpoints/MultipleGateways
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/MultipleGateways
=== RUN   TestNewContourHTTPProxySource/valid_template#01
=== RUN   TestGatewayHTTPRouteSourceEndpoints/MultipleListeners
=== PAUSE TestNewContourHTTPProxySource/valid_template#01
=== RUN   TestServiceSourceNodePortServices/node_port_services_annotated_with_internal_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode
=== RUN   TestNewContourHTTPProxySource/valid_template#02
=== PAUSE TestServiceSourceNodePortServices/node_port_services_annotated_with_internal_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode
=== RUN   TestServiceSourceNodePortServices/node_port_services_annotated_with_external_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode
=== PAUSE TestNewContourHTTPProxySource/valid_template#02
=== PAUSE TestServiceSourceNodePortServices/node_port_services_annotated_with_external_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode
=== RUN   TestNewContourHTTPProxySource/non-empty_annotation_filter_label
=== RUN   TestKongTCPIngressEndpoints/TCPIngress_with_target_annotation
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_with_target_annotation
=== PAUSE TestNewContourHTTPProxySource/non-empty_annotation_filter_label
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/MultipleListeners
=== RUN   TestGateway/TestResourceLabelIsSet
=== RUN   TestGatewayHTTPRouteSourceEndpoints/SectionNameMatch
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/SectionNameMatch
=== RUN   TestGatewayHTTPRouteSourceEndpoints/PortNumberMatch
=== CONT  TestHTTPProxy
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/PortNumberMatch
=== RUN   TestGatewayHTTPRouteSourceEndpoints/WildcardInGateway
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/WildcardInGateway
=== RUN   TestGatewayHTTPRouteSourceEndpoints/WildcardInRoute
=== RUN   TestServiceSourceNodePortServices/node_port_services_annotated_with_both_kops_dns_controller_annotations_return_an_empty_set_of_addons
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/WildcardInRoute
=== PAUSE TestServiceSourceNodePortServices/node_port_services_annotated_with_both_kops_dns_controller_annotations_return_an_empty_set_of_addons
=== RUN   TestGatewayHTTPRouteSourceEndpoints/WildcardInRouteAndGateway
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/WildcardInRouteAndGateway
=== PAUSE TestKongTCPIngressEndpoints/TCPIngress_with_target_annotation
=== RUN   TestIngress/TestDualstackLabelIsSet
=== CONT  TestConnectorSource
=== RUN   TestGatewayHTTPRouteSourceEndpoints/NoRouteHostname
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/NoRouteHostname
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/NoGateways
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/NoGateways
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/NoHostnames
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/NoHostnames
=== RUN   TestGatewayHTTPRouteSourceEndpoints/HostnameAnnotation
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/HostnameAnnotation
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/IgnoreHostnameAnnotation
=== RUN   TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/IgnoreHostnameAnnotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/FQDNTemplate
=== PAUSE TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/FQDNTemplate
=== RUN   TestGatewayHTTPRouteSourceEndpoints/CombineFQDN
=== CONT  TestTraefikProxyOldIngressRouteEndpoints
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/CombineFQDN
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostname_annotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/TTL
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/TTL
=== RUN   TestGatewayHTTPRouteSourceEndpoints/ProviderAnnotations
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/ProviderAnnotations
=== RUN   TestGatewayHTTPRouteSourceEndpoints/DifferentHostnameDifferentGateway
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/DifferentHostnameDifferentGateway
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostname_annotation
=== RUN   TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesSameNamespace
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesSameNamespace
=== RUN   TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesNamespaceSelector
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_host_rule
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesNamespaceSelector
=== RUN   TestGatewayHTTPRouteSourceEndpoints/MissingNamespace
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/MissingNamespace
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_host_rule
=== RUN   TestGatewayHTTPRouteSourceEndpoints/AnnotationOverride
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostheader_rule
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/AnnotationOverride
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostheader_rule
=== RUN   TestGatewayHTTPRouteSourceEndpoints/MutlipleGatewaysOneAnnotationOverride
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_ignoring_annotation
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_ignoring_annotation
=== RUN   TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_omit_wildcard
=== PAUSE TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_omit_wildcard
=== CONT  TestTraefikProxyIngressRouteUDPEndpoints
=== PAUSE TestGatewayHTTPRouteSourceEndpoints/MutlipleGatewaysOneAnnotationOverride
=== RUN   TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation
=== PAUSE TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints
=== RUN   TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation
=== PAUSE TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation
=== RUN   TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation
=== PAUSE TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation
=== CONT  TestTraefikProxyIngressRouteEndpoints
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation
=== RUN   TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni
=== PAUSE TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostname_annotation
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostname_annotation
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_host_rule
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_host_rule
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostheader_rule
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostheader_rule
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_ignoring_annotation
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_ignoring_annotation
=== RUN   TestTraefikProxyIngressRouteEndpoints/IngressRoute_omit_wildcard
=== PAUSE TestTraefikProxyIngressRouteEndpoints/IngressRoute_omit_wildcard
=== CONT  TestTargetFilterSourceEndpoints
=== RUN   TestHTTPProxy/TestResourceLabelIsSet
=== RUN   TestTargetFilterSourceEndpoints/filter_exclusion_all
=== PAUSE TestTargetFilterSourceEndpoints/filter_exclusion_all
=== RUN   TestTargetFilterSourceEndpoints/filter_exclude_internal_net
=== PAUSE TestTargetFilterSourceEndpoints/filter_exclude_internal_net
=== RUN   TestTargetFilterSourceEndpoints/filter_only_internal
=== PAUSE TestTargetFilterSourceEndpoints/filter_only_internal
=== CONT  TestTargetFilterSource
=== RUN   TestTargetFilterSource/Interface
=== RUN   TestTargetFilterSource/Endpoints
=== PAUSE TestTargetFilterSource/Endpoints
=== CONT  TestServiceSource
=== CONT  TestPodSource
=== RUN   TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs
=== PAUSE TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs
=== RUN   TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations
=== PAUSE TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations
=== RUN   TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs
=== PAUSE TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs
=== RUN   TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations
=== PAUSE TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations
=== RUN   TestPodSource/create_records_based_on_pod's_target_annotation
=== PAUSE TestPodSource/create_records_based_on_pod's_target_annotation
=== RUN   TestPodSource/create_multiple_records
=== PAUSE TestPodSource/create_multiple_records
=== RUN   TestPodSource/pods_with_hostNetwore=false_should_be_ignored
=== PAUSE TestPodSource/pods_with_hostNetwore=false_should_be_ignored
=== RUN   TestPodSource/only_watch_a_given_namespace
=== PAUSE TestPodSource/only_watch_a_given_namespace
=== RUN   TestPodSource/split_record_for_internal_hostname_annotation
=== PAUSE TestPodSource/split_record_for_internal_hostname_annotation
=== CONT  TestOcpRouteSource
=== NAME  TestConnectorSource
    suite.go:234: warning: no tests to run
=== RUN   TestConnectorSource/Interface
=== RUN   TestConnectorSource/Endpoints
=== RUN   TestConnectorSource/Endpoints/invalid_remote_server
=== PAUSE TestConnectorSource/Endpoints/invalid_remote_server
=== RUN   TestConnectorSource/Endpoints/valid_remote_server_with_no_endpoints
=== PAUSE TestConnectorSource/Endpoints/valid_remote_server_with_no_endpoints
=== RUN   TestConnectorSource/Endpoints/valid_remote_server
=== PAUSE TestConnectorSource/Endpoints/valid_remote_server
=== RUN   TestConnectorSource/Endpoints/valid_remote_server_with_multiple_endpoints
=== PAUSE TestConnectorSource/Endpoints/valid_remote_server_with_multiple_endpoints
=== CONT  TestMultiSource/Endpoints/no_child_sources_return_no_endpoints
=== CONT  TestNodeSource/NewNodeSource
=== RUN   TestNodeSource/NewNodeSource/invalid_template
=== PAUSE TestNodeSource/NewNodeSource/invalid_template
=== RUN   TestNodeSource/NewNodeSource/valid_empty_template
=== PAUSE TestNodeSource/NewNodeSource/valid_empty_template
=== RUN   TestNodeSource/NewNodeSource/valid_template
=== PAUSE TestNodeSource/NewNodeSource/valid_template
=== RUN   TestNodeSource/NewNodeSource/non-empty_annotation_filter_label
=== PAUSE TestNodeSource/NewNodeSource/non-empty_annotation_filter_label
=== CONT  TestMultiSource/Endpoints/multiple_non-empty_child_sources_returns_merged_children's_endpoints
=== CONT  TestMultiSource/Endpoints/single_non-empty_child_source_returns_child's_endpoints
=== CONT  TestMultiSource/Endpoints/single_empty_child_source_returns_no_endpoints
=== CONT  TestNodeSource/Endpoints
=== RUN   TestNodeSource/Endpoints/node_with_short_hostname_returns_one_endpoint
=== PAUSE TestNodeSource/Endpoints/node_with_short_hostname_returns_one_endpoint
=== RUN   TestNodeSource/Endpoints/node_with_fqdn_returns_one_endpoint
=== PAUSE TestNodeSource/Endpoints/node_with_fqdn_returns_one_endpoint
=== RUN   TestNodeSource/Endpoints/ipv6_node_with_fqdn_returns_one_endpoint
=== PAUSE TestNodeSource/Endpoints/ipv6_node_with_fqdn_returns_one_endpoint
=== RUN   TestNodeSource/Endpoints/node_with_fqdn_template_returns_endpoint_with_expanded_hostname
=== PAUSE TestNodeSource/Endpoints/node_with_fqdn_template_returns_endpoint_with_expanded_hostname
=== RUN   TestNodeSource/Endpoints/node_with_fqdn_and_fqdn_template_returns_one_endpoint
=== PAUSE TestNodeSource/Endpoints/node_with_fqdn_and_fqdn_template_returns_one_endpoint
=== RUN   TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_multiple_IP_addresses_and_expanded_hostname
=== PAUSE TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_multiple_IP_addresses_and_expanded_hostname
=== RUN   TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_dual-stack_IP_addresses_and_expanded_hostname
=== PAUSE TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_dual-stack_IP_addresses_and_expanded_hostname
=== RUN   TestNodeSource/Endpoints/node_with_both_external_and_internal_IP_returns_an_endpoint_with_external_IP
=== PAUSE TestNodeSource/Endpoints/node_with_both_external_and_internal_IP_returns_an_endpoint_with_external_IP
=== RUN   TestNodeSource/Endpoints/node_with_both_external,_internal,_and_IPv6_IP_returns_endpoints_with_external_IPs
=== PAUSE TestNodeSource/Endpoints/node_with_both_external,_internal,_and_IPv6_IP_returns_endpoints_with_external_IPs
=== RUN   TestNodeSource/Endpoints/node_with_only_internal_IP_returns_an_endpoint_with_internal_IP
=== PAUSE TestNodeSource/Endpoints/node_with_only_internal_IP_returns_an_endpoint_with_internal_IP
=== RUN   TestNodeSource/Endpoints/node_with_only_internal_IPs_returns_endpoints_with_internal_IPs
=== PAUSE TestNodeSource/Endpoints/node_with_only_internal_IPs_returns_endpoints_with_internal_IPs
=== RUN   TestNodeSource/Endpoints/node_with_neither_external_nor_internal_IP_returns_no_endpoints
=== PAUSE TestNodeSource/Endpoints/node_with_neither_external_nor_internal_IP_returns_no_endpoints
=== RUN   TestNodeSource/Endpoints/node_with_target_annotation
=== PAUSE TestNodeSource/Endpoints/node_with_target_annotation
=== RUN   TestNodeSource/Endpoints/annotated_node_without_annotation_filter_returns_endpoint
=== PAUSE TestNodeSource/Endpoints/annotated_node_without_annotation_filter_returns_endpoint
=== RUN   TestNodeSource/Endpoints/annotated_node_with_matching_annotation_filter_returns_endpoint
=== PAUSE TestNodeSource/Endpoints/annotated_node_with_matching_annotation_filter_returns_endpoint
=== RUN   TestNodeSource/Endpoints/annotated_node_with_non-matching_annotation_filter_returns_nothing
=== PAUSE TestNodeSource/Endpoints/annotated_node_with_non-matching_annotation_filter_returns_nothing
=== RUN   TestNodeSource/Endpoints/labeled_node_with_matching_label_selector_returns_endpoint
=== PAUSE TestNodeSource/Endpoints/labeled_node_with_matching_label_selector_returns_endpoint
=== RUN   TestNodeSource/Endpoints/labeled_node_with_non-matching_label_selector_returns_nothing
=== PAUSE TestNodeSource/Endpoints/labeled_node_with_non-matching_label_selector_returns_nothing
=== RUN   TestNodeSource/Endpoints/our_controller_type_is_dns-controller
=== PAUSE TestNodeSource/Endpoints/our_controller_type_is_dns-controller
=== RUN   TestNodeSource/Endpoints/different_controller_types_are_ignored
=== PAUSE TestNodeSource/Endpoints/different_controller_types_are_ignored
=== RUN   TestNodeSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false
=== PAUSE TestNodeSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false
=== RUN   TestNodeSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false
=== PAUSE TestNodeSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false
=== RUN   TestNodeSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL
=== PAUSE TestNodeSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL
=== CONT  TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation
=== RUN   TestServiceSource/TestResourceLabelIsSet
=== RUN   TestOcpRouteSource/TestResourceLabelIsSet
--- PASS: TestGatewayTCPRouteSourceEndpoints (0.10s)
=== CONT  TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation
--- PASS: TestGatewayTLSRouteSourceEndpoints (0.10s)
=== CONT  TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation
--- PASS: TestGatewayGRPCRouteSourceEndpoints (0.10s)
=== CONT  TestAmbassadorHostSource/Simple_host
--- PASS: TestGatewayUDPRouteSourceEndpoints (0.10s)
=== CONT  TestAmbassadorHostSource/Host_with_missing_Ambassador_annotation
=== RUN   TestVirtualService/virtualServiceBindsToGateway
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_host_*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_host_*.<domain>
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_host_*.<domain>
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_host_*.<domain>#01
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_host_*.<domain>#02
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_host_*/*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_host_<namespace>/*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_host_./*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_host_./*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_host_<namespace>/*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_host_<namespace>/*#01
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_exportTo_*
=== RUN   TestVirtualService/virtualServiceBindsToGateway/matching_exportTo_<namespace>
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_exportTo_<namespace>
=== RUN   TestVirtualService/virtualServiceBindsToGateway/not_matching_exportTo_.
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig
=== RUN   TestVirtualService/Endpoints
=== PAUSE TestVirtualService/Endpoints
=== RUN   TestVirtualService/gatewaySelectorMatchesService
=== RUN   TestVirtualService/gatewaySelectorMatchesService/gw_selector_matches_lb_selector
=== RUN   TestVirtualService/gatewaySelectorMatchesService/gw_selector_matches_lb_selector_partially
=== RUN   TestVirtualService/gatewaySelectorMatchesService/gw_selector_does_not_match_lb_selector
=== CONT  TestAmbassadorHostSource/Host_with_provider_specific_annotation
=== RUN   TestGateway/endpointsFromGatewayConfig
=== PAUSE TestGateway/endpointsFromGatewayConfig
=== RUN   TestGateway/Endpoints
=== PAUSE TestGateway/Endpoints
=== CONT  TestAmbassadorHostSource/Host_with_TTL_annotation
=== RUN   TestServiceSource/Interface
=== RUN   TestServiceSource/NewServiceSource
=== PAUSE TestServiceSource/NewServiceSource
=== RUN   TestServiceSource/Endpoints
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_with_host_and_virtualServerAddress_set
=== RUN   TestOcpRouteSource/Interface
=== RUN   TestIngress/TestResourceLabelIsSet
=== RUN   TestOcpRouteSource/NewOcpRouteSource
=== PAUSE TestOcpRouteSource/NewOcpRouteSource
=== RUN   TestOcpRouteSource/Endpoints
=== RUN   TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_route_status_target
=== PAUSE TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_route_status_target
=== RUN   TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target_and_ocpRouterName_defined
=== PAUSE TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target_and_ocpRouterName_defined
=== RUN   TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target,_one_ocpRouterName_and_two_router_canonical_names
=== PAUSE TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target,_one_ocpRouterName_and_two_router_canonical_names
=== RUN   TestOcpRouteSource/Endpoints/route_not_admitted_by_the_given_router
=== PAUSE TestOcpRouteSource/Endpoints/route_not_admitted_by_the_given_router
=== RUN   TestOcpRouteSource/Endpoints/route_not_admitted_by_any_router
=== PAUSE TestOcpRouteSource/Endpoints/route_not_admitted_by_any_router
=== RUN   TestOcpRouteSource/Endpoints/route_admitted_by_first_appropriate_router
=== PAUSE TestOcpRouteSource/Endpoints/route_admitted_by_first_appropriate_router
=== RUN   TestOcpRouteSource/Endpoints/route_with_incorrect_externalDNS_controller_annotation
=== PAUSE TestOcpRouteSource/Endpoints/route_with_incorrect_externalDNS_controller_annotation
=== RUN   TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_annotation_target
=== PAUSE TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_annotation_target
=== RUN   TestOcpRouteSource/Endpoints/route_with_matching_labels
=== PAUSE TestOcpRouteSource/Endpoints/route_with_matching_labels
=== RUN   TestOcpRouteSource/Endpoints/route_without_matching_labels
=== PAUSE TestOcpRouteSource/Endpoints/route_without_matching_labels
=== CONT  TestAmbassadorHostSource/Host_with_target_annotation
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy
=== RUN   TestHTTPProxy/Endpoints
=== PAUSE TestHTTPProxy/Endpoints
=== CONT  TestAmbassadorHostSource/Service_with_external_IP
=== CONT  TestAmbassadorHostSource/Service_with_load_balancer_hostname
=== PAUSE TestServiceSource/Endpoints
=== RUN   TestServiceSource/MultipleServices
=== PAUSE TestServiceSource/MultipleServices
=== CONT  TestNewIstioVirtualServiceSource/invalid_template
=== CONT  TestNewIstioVirtualServiceSource/valid_template#01
=== CONT  TestNewIstioVirtualServiceSource/valid_template
=== CONT  TestNewIstioVirtualServiceSource/valid_empty_template
=== CONT  TestNewIstioVirtualServiceSource/valid_template#02
--- PASS: TestTraefikProxyOldIngressRouteUDPEndpoints (0.00s)
    --- PASS: TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation (0.11s)
    --- PASS: TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation (0.10s)
=== RUN   TestIngress/endpointsFromIngress
=== PAUSE TestIngress/endpointsFromIngress
=== RUN   TestIngress/endpointsFromIngressHostnameSourceAnnotation
=== RUN   TestIngress/endpointsFromIngressHostnameSourceAnnotation/No_ingress-hostname-source_annotation,_one_rule.host,_one_annotation_host
=== RUN   TestIngress/endpointsFromIngressHostnameSourceAnnotation/No_ingress-hostname-source_annotation,_one_rule.host
=== RUN   TestIngress/endpointsFromIngressHostnameSourceAnnotation/No_ingress-hostname-source_annotation,_one_rule.host,_one_annotation_host#01
=== RUN   TestIngress/endpointsFromIngressHostnameSourceAnnotation/Ingress-hostname-source=defined-hosts-only,_one_rule.host,_one_annotation_host
=== RUN   TestIngress/endpointsFromIngressHostnameSourceAnnotation/Ingress-hostname-source=annotation-only,_one_rule.host,_one_annotation_host
=== RUN   TestIngress/Endpoints
=== PAUSE TestIngress/Endpoints
=== CONT  TestNewIstioVirtualServiceSource/non-empty_annotation_filter_label
=== CONT  TestClusterIpServices/hostname_annotated_ClusterIp_services_return_an_endpoint_with_Cluster_IP
=== CONT  TestClusterIpServices/invalid_hostname_does_not_generate_endpoints
=== CONT  TestClusterIpServices/ClusterIP_service_without_matching_label_generates_an_endpoint
=== CONT  TestClusterIpServices/ClusterIP_service_with_matching_label_generates_an_endpoint
=== CONT  TestClusterIpServices/Headless_services_generate_endpoints_when_target_is_specified
=== CONT  TestClusterIpServices/ClusterIP_service_with_matching_label_and_target_generates_a_CNAME_endpoint
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_with_host_set_and_IP_address_from_the_status_field
--- PASS: TestAmbassadorHostSource (0.00s)
    --- PASS: TestAmbassadorHostSource/Host_with_target_annotation (0.11s)
    --- PASS: TestAmbassadorHostSource/Host_with_TTL_annotation (0.11s)
    --- PASS: TestAmbassadorHostSource/Simple_host (0.12s)
    --- PASS: TestAmbassadorHostSource/Service_with_external_IP (0.11s)
    --- PASS: TestAmbassadorHostSource/Host_with_provider_specific_annotation (0.12s)
    --- PASS: TestAmbassadorHostSource/Host_with_missing_Ambassador_annotation (0.12s)
    --- PASS: TestAmbassadorHostSource/Service_with_load_balancer_hostname (0.11s)
=== CONT  TestClusterIpServices/Headless_services_do_not_generate_endpoints
=== CONT  TestClusterIpServices/non-annotated_ClusterIp_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== CONT  TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME
=== CONT  TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_are_ignored
=== CONT  TestClusterIpServices/hostname_annotated_ClusterIp_services_are_ignored
--- PASS: TestNewIstioVirtualServiceSource (0.00s)
    --- PASS: TestNewIstioVirtualServiceSource/invalid_template (0.00s)
    --- PASS: TestNewIstioVirtualServiceSource/valid_template#01 (0.00s)
    --- PASS: TestNewIstioVirtualServiceSource/valid_template (0.10s)
    --- PASS: TestNewIstioVirtualServiceSource/valid_template#02 (0.10s)
    --- PASS: TestNewIstioVirtualServiceSource/valid_empty_template (0.10s)
    --- PASS: TestNewIstioVirtualServiceSource/non-empty_annotation_filter_label (0.10s)
=== CONT  TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_two_endpoints_with_the_specified_CNAMES_and_AAAA
=== CONT  TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAMES
=== CONT  TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_AAAA
=== CONT  TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME
=== CONT  TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_A
=== CONT  TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_enabled
=== CONT  TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_enabled
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_with_no_IP_address_set
=== CONT  TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_disabled
=== CONT  TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_disabled
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_without_a_targetRef_has_no_endpoints
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_pods_missing_hostname
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_pods_missing_hostname
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod
--- PASS: TestClusterIpServices (0.00s)
    --- PASS: TestClusterIpServices/hostname_annotated_ClusterIp_services_return_an_endpoint_with_Cluster_IP (0.10s)
    --- PASS: TestClusterIpServices/invalid_hostname_does_not_generate_endpoints (0.10s)
    --- PASS: TestClusterIpServices/ClusterIP_service_without_matching_label_generates_an_endpoint (0.10s)
    --- PASS: TestClusterIpServices/Headless_services_generate_endpoints_when_target_is_specified (0.10s)
    --- PASS: TestClusterIpServices/Headless_services_do_not_generate_endpoints (0.10s)
    --- PASS: TestClusterIpServices/ClusterIP_service_with_matching_label_generates_an_endpoint (0.10s)
    --- PASS: TestClusterIpServices/ClusterIP_service_with_matching_label_and_target_generates_a_CNAME_endpoint (0.10s)
    --- PASS: TestClusterIpServices/non-annotated_ClusterIp_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP (0.10s)
    --- PASS: TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_are_ignored (0.10s)
    --- PASS: TestClusterIpServices/hostname_and_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME (0.10s)
    --- PASS: TestClusterIpServices/hostname_annotated_ClusterIp_services_are_ignored (0.10s)
    --- PASS: TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_two_endpoints_with_the_specified_CNAMES_and_AAAA (0.10s)
    --- PASS: TestClusterIpServices/multiple_target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAMES (0.10s)
    --- PASS: TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_AAAA (0.10s)
    --- PASS: TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_A (0.10s)
    --- PASS: TestClusterIpServices/target_annotated_ClusterIp_services_return_an_endpoint_with_the_specified_CNAME (0.10s)
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod
=== CONT  TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_with_matching_annotation_filter
=== CONT  TestHeadlessServicesHostIP/hostname_annotated_Headless_services_are_ignored
=== CONT  TestExternalServices/external_services_return_an_A_endpoint_for_the_external_name_that_is_an_IPv4_address
--- PASS: TestTraefikAPIGroupDisableFlags (0.00s)
    --- PASS: TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_enabled (0.10s)
    --- PASS: TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_enabled (0.10s)
    --- PASS: TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.io_with_the_new_API_group_disabled (0.10s)
    --- PASS: TestTraefikAPIGroupDisableFlags/IngressRoute.traefik.containo.us_with_the_legacy_API_group_disabled (0.10s)
=== CONT  TestExternalServices/annotated_ExternalName_service_with_externalIPs_of_dualstack_addresses_returns_2_endpoints_with_multiple_targets
=== CONT  TestExternalServices/annotated_ExternalName_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets
=== CONT  TestExternalServices/external_services_return_a_CNAME_endpoint_for_the_external_name_that_is_a_domain
=== CONT  TestExternalServices/external_services_return_an_AAAA_endpoint_for_the_external_name_that_is_an_IPv6_address
=== CONT  TestNewIstioGatewaySource/invalid_template
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod
=== CONT  TestNewIstioGatewaySource/non-empty_annotation_filter_label
=== CONT  TestNewIstioGatewaySource/valid_template#02
=== CONT  TestNewIstioGatewaySource/valid_template#01
=== CONT  TestNewIstioGatewaySource/valid_template
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_with_non-matching_annotation_filter
--- PASS: TestHeadlessServicesHostIP (0.00s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_without_a_targetRef_has_no_endpoints (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_for_pods_missing_hostname (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_pods_missing_hostname (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServicesHostIP/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServicesHostIP/hostname_annotated_Headless_services_are_ignored (0.10s)
=== CONT  TestNewIstioGatewaySource/valid_empty_template
=== CONT  TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv6_targets
=== CONT  TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv4_targets
=== CONT  TestHeadlessServices/annotated_Headless_services_return_endpoints_for_pods_missing_hostname
=== CONT  TestHeadlessServices/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set
=== CONT  TestHeadlessServices/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state
--- PASS: TestExternalServices (0.00s)
    --- PASS: TestExternalServices/external_services_return_an_A_endpoint_for_the_external_name_that_is_an_IPv4_address (0.10s)
    --- PASS: TestExternalServices/annotated_ExternalName_service_with_externalIPs_of_dualstack_addresses_returns_2_endpoints_with_multiple_targets (0.10s)
    --- PASS: TestExternalServices/annotated_ExternalName_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets (0.10s)
    --- PASS: TestExternalServices/external_services_return_an_AAAA_endpoint_for_the_external_name_that_is_an_IPv6_address (0.10s)
    --- PASS: TestExternalServices/external_services_return_a_CNAME_endpoint_for_the_external_name_that_is_a_domain (0.10s)
=== CONT  TestHeadlessServices/hostname_annotated_Headless_services_are_ignored
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== RUN   TestF5VirtualServerEndpoints/F5_VirtualServer_TTL_annotation
--- PASS: TestNewIstioGatewaySource (0.00s)
    --- PASS: TestNewIstioGatewaySource/invalid_template (0.00s)
    --- PASS: TestNewIstioGatewaySource/valid_template#02 (0.10s)
    --- PASS: TestNewIstioGatewaySource/non-empty_annotation_filter_label (0.10s)
    --- PASS: TestNewIstioGatewaySource/valid_template#01 (0.10s)
    --- PASS: TestNewIstioGatewaySource/valid_template (0.10s)
    --- PASS: TestNewIstioGatewaySource/valid_empty_template (0.10s)
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_hostIP_if_endpoints-type_annotation_is_set
=== CONT  TestHeadlessServices/annotated_Headless_services_return_dual-stack_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_hostIP_if_endpoints-type_annotation_is_set
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_pod_annotation
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_node_external_IP_if_endpoints-type_annotation_is_set
=== CONT  TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_pod_annotation
=== CONT  TestNewIngressSource/invalid_template
=== CONT  TestNewIngressSource/valid_template#02
=== CONT  TestNewIngressSource/non-empty_ingress_class_name_list
=== CONT  TestNewIngressSource/non-empty_annotation_filter_label
=== CONT  TestNewIngressSource/valid_template
=== CONT  TestNewIngressSource/valid_template#01
=== CONT  TestNewIngressSource/valid_empty_template
--- PASS: TestF5VirtualServerEndpoints (0.73s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_with_target_annotation (0.11s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_with_host_and_virtualServerAddress_set (0.11s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_with_host_set_and_IP_address_from_the_status_field (0.10s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_with_no_IP_address_set (0.10s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_with_matching_annotation_filter (0.10s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_with_non-matching_annotation_filter (0.10s)
    --- PASS: TestF5VirtualServerEndpoints/F5_VirtualServer_TTL_annotation (0.11s)
=== CONT  TestNewIngressSource/ingress_class_name_and_annotation_filter_jointly_specified
=== CONT  TestNewContourHTTPProxySource/invalid_template
=== CONT  TestNewContourHTTPProxySource/non-empty_annotation_filter_label
=== CONT  TestNewContourHTTPProxySource/valid_template
=== CONT  TestNewContourHTTPProxySource/valid_template#02
=== CONT  TestNewContourHTTPProxySource/valid_template#01
--- PASS: TestHeadlessServices (0.01s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv4_targets (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_only_a_unique_set_of_IPv6_targets (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_endpoints_for_all_Pod_if_publishNotReadyAddresses_is_set (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_endpoints_for_pods_missing_hostname (0.10s)
    --- PASS: TestHeadlessServices/hostname_annotated_Headless_services_are_ignored (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv4_endpoints_with_TTL_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_with_TTL_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_endpoints_for_each_selected_Pod,_which_are_in_running_state (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_node_external_IP_if_endpoints-type_annotation_is_set (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv6_endpoints_for_each_selected_Pod (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_hostIP_if_endpoints-type_annotation_is_set (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_dual-stack_targets_from_node_external_IP_if_endpoints-type_annotation_is_set (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_hostIP_if_endpoints-type_annotation_is_set (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_node_external_IP_if_endpoints-type_annotation_is_set (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv6_targets_from_pod_annotation (0.10s)
    --- PASS: TestHeadlessServices/annotated_Headless_services_return_IPv4_targets_from_pod_annotation (0.10s)
=== CONT  TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes
=== CONT  TestServiceSourceNodePortServices/node_port_services_annotated_with_both_kops_dns_controller_annotations_return_an_empty_set_of_addons
=== CONT  TestNewContourHTTPProxySource/valid_empty_template
=== CONT  TestServiceSourceNodePortServices/node_port_services_annotated_with_external_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode
=== CONT  TestServiceSourceNodePortServices/node_port_services_annotated_with_internal_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode
=== CONT  TestServiceSourceNodePortServices/node_port_services_annotated_DNS_Controller_annotations_return_an_endpoint_where_all_targets_has_the_node_role
=== CONT  TestServiceSourceNodePortServices/access=public_annotation_NodePort_services_return_an_endpoint_with_public_IP_addresses_of_the_cluster's_nodes
=== CONT  TestServiceSourceNodePortServices/access=private_annotation_NodePort_services_return_an_endpoint_with_private_IP_addresses_of_the_cluster's_nodes
--- PASS: TestNewIngressSource (0.01s)
    --- PASS: TestNewIngressSource/invalid_template (0.00s)
    --- PASS: TestNewIngressSource/ingress_class_name_and_annotation_filter_jointly_specified (0.00s)
    --- PASS: TestNewIngressSource/valid_template#02 (0.10s)
    --- PASS: TestNewIngressSource/non-empty_annotation_filter_label (0.10s)
    --- PASS: TestNewIngressSource/non-empty_ingress_class_name_list (0.10s)
    --- PASS: TestNewIngressSource/valid_template (0.10s)
    --- PASS: TestNewIngressSource/valid_template#01 (0.10s)
    --- PASS: TestNewIngressSource/valid_empty_template (0.10s)
=== CONT  TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state_&_not_in_Terminating
=== CONT  TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state
=== CONT  TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_and_multiple_pods_on_a_single_node_return_an_endpoint_with_unique_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only
=== CONT  TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only
=== CONT  TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_private_cluster's_nodes
=== CONT  TestServiceSourceNodePortServices/non-annotated_NodePort_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== CONT  TestServiceSourceNodePortServices/hostname_annotated_NodePort_services_are_ignored
=== CONT  TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation
=== CONT  TestKongTCPIngressEndpoints/TCPIngress_with_target_annotation
--- PASS: TestNewContourHTTPProxySource (0.00s)
    --- PASS: TestNewContourHTTPProxySource/invalid_template (0.00s)
    --- PASS: TestNewContourHTTPProxySource/non-empty_annotation_filter_label (0.10s)
    --- PASS: TestNewContourHTTPProxySource/valid_template (0.10s)
    --- PASS: TestNewContourHTTPProxySource/valid_template#02 (0.10s)
    --- PASS: TestNewContourHTTPProxySource/valid_template#01 (0.11s)
    --- PASS: TestNewContourHTTPProxySource/valid_empty_template (0.11s)
=== CONT  TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation_and_using_SNI
=== CONT  TestKongTCPIngressEndpoints/TCPIngress_ignoring_hostname_annotation
=== CONT  TestKongTCPIngressEndpoints/TCPIngress_using_SNI
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule
=== CONT  TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation
--- PASS: TestServiceSourceNodePortServices (0.01s)
    --- PASS: TestServiceSourceNodePortServices/node_port_services_annotated_with_internal_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode (0.10s)
    --- PASS: TestServiceSourceNodePortServices/node_port_services_annotated_with_both_kops_dns_controller_annotations_return_an_empty_set_of_addons (0.10s)
    --- PASS: TestServiceSourceNodePortServices/node_port_services_annotated_with_external_DNS_Controller_annotations_return_an_endpoint_in_compatibility_mode (0.11s)
    --- PASS: TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes (0.11s)
    --- PASS: TestServiceSourceNodePortServices/node_port_services_annotated_DNS_Controller_annotations_return_an_endpoint_where_all_targets_has_the_node_role (0.10s)
    --- PASS: TestServiceSourceNodePortServices/access=public_annotation_NodePort_services_return_an_endpoint_with_public_IP_addresses_of_the_cluster's_nodes (0.10s)
    --- PASS: TestServiceSourceNodePortServices/access=private_annotation_NodePort_services_return_an_endpoint_with_private_IP_addresses_of_the_cluster's_nodes (0.10s)
    --- PASS: TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state_&_not_in_Terminating (0.10s)
    --- PASS: TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_and_multiple_pods_on_a_single_node_return_an_endpoint_with_unique_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only (0.10s)
    --- PASS: TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_pods_in_Ready_&_Running_state (0.10s)
    --- PASS: TestServiceSourceNodePortServices/annotated_NodePort_services_return_an_endpoint_with_IP_addresses_of_the_private_cluster's_nodes (0.10s)
    --- PASS: TestServiceSourceNodePortServices/annotated_NodePort_services_with_ExternalTrafficPolicy=Local_return_an_endpoint_with_IP_addresses_of_the_cluster's_nodes_where_pods_is_running_only (0.10s)
    --- PASS: TestServiceSourceNodePortServices/non-annotated_NodePort_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP (0.10s)
    --- PASS: TestServiceSourceNodePortServices/hostname_annotated_NodePort_services_are_ignored (0.11s)
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostname_annotation
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_omit_wildcard
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_ignoring_annotation
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostheader_rule
--- PASS: TestKongTCPIngressEndpoints (0.00s)
    --- PASS: TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation_and_using_SNI (0.11s)
    --- PASS: TestKongTCPIngressEndpoints/TCPIngress_ignoring_hostname_annotation (0.11s)
    --- PASS: TestKongTCPIngressEndpoints/TCPIngress_with_hostname_annotation (0.11s)
    --- PASS: TestKongTCPIngressEndpoints/TCPIngress_using_SNI (0.11s)
    --- PASS: TestKongTCPIngressEndpoints/TCPIngress_with_target_annotation (0.11s)
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_host_rule
=== CONT  TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules
=== CONT  TestGatewayHTTPRouteSourceEndpoints/GatewayNamespace
=== CONT  TestGatewayHTTPRouteSourceEndpoints/NoHostnames
=== CONT  TestGatewayHTTPRouteSourceEndpoints/SectionNameMatch
=== CONT  TestGatewayHTTPRouteSourceEndpoints/NoGateways
=== CONT  TestGatewayHTTPRouteSourceEndpoints/NoRouteHostname
=== CONT  TestGatewayHTTPRouteSourceEndpoints/WildcardInRouteAndGateway
=== CONT  TestGatewayHTTPRouteSourceEndpoints/WildcardInRoute
=== CONT  TestGatewayHTTPRouteSourceEndpoints/WildcardInGateway
--- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints (0.00s)
    --- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation (0.11s)
    --- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule (0.11s)
    --- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules (0.11s)
    --- PASS: TestTraefikProxyOldIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation (0.10s)
=== CONT  TestGatewayHTTPRouteSourceEndpoints/PortNumberMatch
=== CONT  TestGatewayHTTPRouteSourceEndpoints/RouteAnnotationFilter
=== CONT  TestGatewayHTTPRouteSourceEndpoints/GatewayLabelFilter
--- PASS: TestTraefikProxyOldIngressRouteEndpoints (0.00s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostname_annotation (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_ignoring_annotation (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_omit_wildcard (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_host_rule (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_hostheader_rule (0.10s)
    --- PASS: TestTraefikProxyOldIngressRouteEndpoints/IngressRoute_with_multiple_host_rules (0.10s)
=== CONT  TestGatewayHTTPRouteSourceEndpoints/MultipleListeners
=== CONT  TestGatewayHTTPRouteSourceEndpoints/MultipleGateways
=== CONT  TestGatewayHTTPRouteSourceEndpoints/SkipControllerAnnotation
=== CONT  TestGatewayHTTPRouteSourceEndpoints/DifferentHostnameDifferentGateway
=== CONT  TestGatewayHTTPRouteSourceEndpoints/MutlipleGatewaysOneAnnotationOverride
=== CONT  TestGatewayHTTPRouteSourceEndpoints/AnnotationOverride
=== CONT  TestGatewayHTTPRouteSourceEndpoints/MissingNamespace
=== CONT  TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesNamespaceSelector
=== CONT  TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesSameNamespace
=== CONT  TestGatewayHTTPRouteSourceEndpoints/RouteLabelFilter
=== CONT  TestGatewayHTTPRouteSourceEndpoints/CombineFQDN
=== CONT  TestGatewayHTTPRouteSourceEndpoints/ProviderAnnotations
=== CONT  TestGatewayHTTPRouteSourceEndpoints/RouteNamespace
=== CONT  TestGatewayHTTPRouteSourceEndpoints/TTL
=== CONT  TestGatewayHTTPRouteSourceEndpoints/IgnoreHostnameAnnotation
=== CONT  TestGatewayHTTPRouteSourceEndpoints/HostnameAnnotation
=== CONT  TestGatewayHTTPRouteSourceEndpoints/FQDNTemplate
=== CONT  TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation
=== CONT  TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation
=== CONT  TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostname_annotation
=== CONT  TestTargetFilterSourceEndpoints/filter_exclusion_all
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules
=== CONT  TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_omit_wildcard
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostheader_rule
--- PASS: TestGatewayHTTPRouteSourceEndpoints (0.00s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/NoHostnames (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/GatewayNamespace (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/NoGateways (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/SectionNameMatch (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/WildcardInRoute (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/WildcardInRouteAndGateway (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/NoRouteHostname (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/WildcardInGateway (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/PortNumberMatch (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/RouteAnnotationFilter (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/GatewayLabelFilter (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/MultipleListeners (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/SkipControllerAnnotation (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/MultipleGateways (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/DifferentHostnameDifferentGateway (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/MutlipleGatewaysOneAnnotationOverride (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/MissingNamespace (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/AnnotationOverride (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesNamespaceSelector (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/AllowedRoutesSameNamespace (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/RouteLabelFilter (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/ProviderAnnotations (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/CombineFQDN (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/RouteNamespace (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/IgnoreHostnameAnnotation (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/TTL (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/HostnameAnnotation (0.10s)
    --- PASS: TestGatewayHTTPRouteSourceEndpoints/FQDNTemplate (0.10s)
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_ignoring_annotation
--- PASS: TestTraefikProxyIngressRouteUDPEndpoints (0.00s)
    --- PASS: TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_hostname_annotation (0.10s)
    --- PASS: TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_ignoring_hostname_annotation (0.10s)
    --- PASS: TestTraefikProxyIngressRouteUDPEndpoints/IngressRouteTCP_with_multiple_hostname_annotation (0.10s)
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation
=== CONT  TestTargetFilterSourceEndpoints/filter_only_internal
=== CONT  TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_host_rule
=== CONT  TestTargetFilterSource/Endpoints
=== RUN   TestTargetFilterSource/Endpoints/filter_exclusion_all
=== PAUSE TestTargetFilterSource/Endpoints/filter_exclusion_all
=== RUN   TestTargetFilterSource/Endpoints/filter_exclude_internal_net
=== PAUSE TestTargetFilterSource/Endpoints/filter_exclude_internal_net
=== RUN   TestTargetFilterSource/Endpoints/filter_only_internal
=== PAUSE TestTargetFilterSource/Endpoints/filter_only_internal
=== CONT  TestTargetFilterSourceEndpoints/filter_exclude_internal_net
--- PASS: TestTargetFilterSourceEndpoints (0.00s)
    --- PASS: TestTargetFilterSourceEndpoints/filter_exclusion_all (0.00s)
    --- PASS: TestTargetFilterSourceEndpoints/filter_only_internal (0.00s)
    --- PASS: TestTargetFilterSourceEndpoints/filter_exclude_internal_net (0.00s)
=== CONT  TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs
=== CONT  TestPodSource/create_multiple_records
=== CONT  TestPodSource/split_record_for_internal_hostname_annotation
=== CONT  TestPodSource/only_watch_a_given_namespace
=== CONT  TestPodSource/pods_with_hostNetwore=false_should_be_ignored
--- PASS: TestTraefikProxyIngressRouteTCPEndpoints (0.00s)
    --- PASS: TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_hostname_annotation (0.11s)
    --- PASS: TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_omit_wildcard_host_sni (0.10s)
    --- PASS: TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_ignoring_annotation (0.11s)
    --- PASS: TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules_and_annotation (0.10s)
    --- PASS: TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_multiple_host_sni_rules (0.10s)
    --- PASS: TestTraefikProxyIngressRouteTCPEndpoints/IngressRouteTCP_with_host_sni_rule (0.10s)
=== CONT  TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations
=== CONT  TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs
=== CONT  TestPodSource/create_records_based_on_pod's_target_annotation
=== CONT  TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations
=== CONT  TestConnectorSource/Endpoints/invalid_remote_server
=== CONT  TestConnectorSource/Endpoints/valid_remote_server
    connector_test.go:54: Server listening on 127.0.0.1:49620
=== CONT  TestConnectorSource/Endpoints/valid_remote_server_with_multiple_endpoints
=== CONT  TestConnectorSource/Endpoints/valid_remote_server_with_no_endpoints
=== CONT  TestNodeSource/NewNodeSource/invalid_template
=== CONT  TestNodeSource/NewNodeSource/valid_template
=== NAME  TestConnectorSource/Endpoints/valid_remote_server_with_no_endpoints
    connector_test.go:54: Server listening on 127.0.0.1:49625
=== NAME  TestConnectorSource/Endpoints/valid_remote_server_with_multiple_endpoints
    connector_test.go:54: Server listening on 127.0.0.1:49626
=== CONT  TestNodeSource/NewNodeSource/non-empty_annotation_filter_label
=== CONT  TestNodeSource/NewNodeSource/valid_empty_template
--- PASS: TestTraefikProxyIngressRouteEndpoints (0.00s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostname_annotation (0.10s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_omit_wildcard (0.10s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_hostheader_rule (0.10s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules_and_annotation (0.10s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_ignoring_annotation (0.10s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_multiple_host_rules (0.10s)
    --- PASS: TestTraefikProxyIngressRouteEndpoints/IngressRoute_with_host_rule (0.10s)
=== RUN   TestMultiSource/EndpointsWithError
=== RUN   TestMultiSource/EndpointsDefaultTargets
--- PASS: TestMultiSource (1.55s)
    --- PASS: TestMultiSource/Interface (0.00s)
    --- PASS: TestMultiSource/Endpoints (0.00s)
        --- PASS: TestMultiSource/Endpoints/no_child_sources_return_no_endpoints (0.00s)
        --- PASS: TestMultiSource/Endpoints/multiple_non-empty_child_sources_returns_merged_children's_endpoints (0.00s)
        --- PASS: TestMultiSource/Endpoints/single_non-empty_child_source_returns_child's_endpoints (0.00s)
        --- PASS: TestMultiSource/Endpoints/single_empty_child_source_returns_no_endpoints (0.00s)
    --- PASS: TestMultiSource/EndpointsWithError (0.00s)
    --- PASS: TestMultiSource/EndpointsDefaultTargets (0.00s)
=== CONT  TestNodeSource/Endpoints/node_with_short_hostname_returns_one_endpoint
=== CONT  TestNodeSource/Endpoints/node_with_target_annotation
=== CONT  TestNodeSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL
=== CONT  TestNodeSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false
=== CONT  TestNodeSource/Endpoints/different_controller_types_are_ignored
=== CONT  TestNodeSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false
=== CONT  TestNodeSource/Endpoints/labeled_node_with_non-matching_label_selector_returns_nothing
=== CONT  TestNodeSource/Endpoints/our_controller_type_is_dns-controller
=== CONT  TestNodeSource/Endpoints/labeled_node_with_matching_label_selector_returns_endpoint
--- PASS: TestPodSource (0.00s)
    --- PASS: TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs (0.10s)
    --- PASS: TestPodSource/create_multiple_records (0.10s)
    --- PASS: TestPodSource/split_record_for_internal_hostname_annotation (0.10s)
    --- PASS: TestPodSource/only_watch_a_given_namespace (0.10s)
    --- PASS: TestPodSource/pods_with_hostNetwore=false_should_be_ignored (0.10s)
    --- PASS: TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations (0.10s)
    --- PASS: TestPodSource/create_records_based_on_pod's_target_annotation (0.10s)
    --- PASS: TestPodSource/create_IPv6_records_based_on_pod's_external_and_internal_IPs (0.10s)
    --- PASS: TestPodSource/create_IPv4_records_based_on_pod's_external_and_internal_IPs_using_DNS_Controller_annotations (0.10s)
=== CONT  TestNodeSource/Endpoints/annotated_node_with_non-matching_annotation_filter_returns_nothing
=== CONT  TestNodeSource/Endpoints/annotated_node_with_matching_annotation_filter_returns_endpoint
=== CONT  TestNodeSource/Endpoints/annotated_node_without_annotation_filter_returns_endpoint
=== CONT  TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_dual-stack_IP_addresses_and_expanded_hostname
=== CONT  TestNodeSource/Endpoints/node_with_neither_external_nor_internal_IP_returns_no_endpoints
=== CONT  TestNodeSource/Endpoints/node_with_only_internal_IPs_returns_endpoints_with_internal_IPs
=== CONT  TestNodeSource/Endpoints/node_with_only_internal_IP_returns_an_endpoint_with_internal_IP
=== CONT  TestNodeSource/Endpoints/node_with_both_external,_internal,_and_IPv6_IP_returns_endpoints_with_external_IPs
=== CONT  TestNodeSource/Endpoints/node_with_both_external_and_internal_IP_returns_an_endpoint_with_external_IP
=== CONT  TestNodeSource/Endpoints/node_with_fqdn_template_returns_endpoint_with_expanded_hostname
=== CONT  TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_multiple_IP_addresses_and_expanded_hostname
=== CONT  TestNodeSource/Endpoints/node_with_fqdn_and_fqdn_template_returns_one_endpoint
=== CONT  TestNodeSource/Endpoints/ipv6_node_with_fqdn_returns_one_endpoint
=== CONT  TestNodeSource/Endpoints/node_with_fqdn_returns_one_endpoint
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.hostname
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.hostname
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.IP
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.IP
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.externalIPs
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.externalIPs
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname_and_two_lb.externalIPs
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname_and_two_lb.externalIPs
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.host
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.host
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.gateway
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.gateway
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/one_empty_rule.host
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/one_empty_rule.host
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/no_targets
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/no_targets
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/matching_selectors_for_service_and_gateway
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/matching_selectors_for_service_and_gateway
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_same_namespace
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_same_namespace
=== RUN   TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_separate_namespace
=== PAUSE TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_separate_namespace
=== CONT  TestGateway/endpointsFromGatewayConfig
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.hostname
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.hostname
=== RUN   TestGateway/endpointsFromGatewayConfig/one_namespaced_rule.host_one_lb.hostname
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_namespaced_rule.host_one_lb.hostname
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.IP
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.IP
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_one_ingress.IP
=== CONT  TestVirtualService/Endpoints
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_one_ingress.IP
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_two_ingress.IP_and_two_ingress.Hostname
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_two_ingress.IP_and_two_ingress.Hostname
=== RUN   TestGateway/endpointsFromGatewayConfig/no_rule.host
=== PAUSE TestGateway/endpointsFromGatewayConfig/no_rule.host
=== RUN   TestGateway/endpointsFromGatewayConfig/one_empty_rule.host
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_empty_rule.host
=== RUN   TestGateway/endpointsFromGatewayConfig/one_empty_rule.host_with_gateway_ingress_annotation
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_empty_rule.host_with_gateway_ingress_annotation
=== RUN   TestGateway/endpointsFromGatewayConfig/no_targets
=== PAUSE TestGateway/endpointsFromGatewayConfig/no_targets
=== RUN   TestGateway/endpointsFromGatewayConfig/one_gateway,_two_ingressgateway_loadbalancer_hostnames
=== RUN   TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingressgateway_loadbalancer_service
=== PAUSE TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingressgateway_loadbalancer_service
=== RUN   TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingress
=== PAUSE TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingress
=== RUN   TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service
=== PAUSE TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service
=== RUN   TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service_with_externalIPs
=== PAUSE TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service_with_externalIPs
=== RUN   TestVirtualService/Endpoints/two_simple_virtualservices_on_different_namespaces_with_the_same_target_gateway,_one_ingressgateway_loadbalancer_service
=== PAUSE TestVirtualService/Endpoints/two_simple_virtualservices_on_different_namespaces_with_the_same_target_gateway,_one_ingressgateway_loadbalancer_service
=== RUN   TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service
=== PAUSE TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service
=== RUN   TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service_with_externalIPs
=== PAUSE TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service_with_externalIPs
=== RUN   TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingress
=== PAUSE TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingress
=== RUN   TestVirtualService/Endpoints/valid_matching_annotation_filter_expression
=== PAUSE TestVirtualService/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestVirtualService/Endpoints/valid_non-matching_annotation_filter_expression
=== PAUSE TestVirtualService/Endpoints/valid_non-matching_annotation_filter_expression
=== RUN   TestVirtualService/Endpoints/invalid_annotation_filter_expression
=== PAUSE TestVirtualService/Endpoints/invalid_annotation_filter_expression
=== RUN   TestVirtualService/Endpoints/gateway_ingress_annotation;_ingress_not_found
=== PAUSE TestVirtualService/Endpoints/gateway_ingress_annotation;_ingress_not_found
=== RUN   TestVirtualService/Endpoints/our_controller_type_is_dns-controller
=== PAUSE TestVirtualService/Endpoints/our_controller_type_is_dns-controller
=== RUN   TestVirtualService/Endpoints/different_controller_types_are_ignored
=== PAUSE TestVirtualService/Endpoints/different_controller_types_are_ignored
=== RUN   TestVirtualService/Endpoints/template_for_virtualservice_if_host_is_missing
=== PAUSE TestVirtualService/Endpoints/template_for_virtualservice_if_host_is_missing
=== RUN   TestVirtualService/Endpoints/multiple_FQDN_template_hostnames
=== PAUSE TestVirtualService/Endpoints/multiple_FQDN_template_hostnames
=== RUN   TestVirtualService/Endpoints/multiple_FQDN_template_hostnames_with_restricted_gw.hosts
=== PAUSE TestVirtualService/Endpoints/multiple_FQDN_template_hostnames_with_restricted_gw.hosts
=== RUN   TestVirtualService/Endpoints/virtualservice_with_target_annotation
=== PAUSE TestVirtualService/Endpoints/virtualservice_with_target_annotation
=== RUN   TestVirtualService/Endpoints/virtualservice;_gateway_with_target_annotation
=== PAUSE TestVirtualService/Endpoints/virtualservice;_gateway_with_target_annotation
=== RUN   TestVirtualService/Endpoints/virtualservice;_gateway_with_target_and_ingress_annotation
=== PAUSE TestVirtualService/Endpoints/virtualservice;_gateway_with_target_and_ingress_annotation
=== RUN   TestVirtualService/Endpoints/virtualservice_with_hostname_annotation
=== PAUSE TestVirtualService/Endpoints/virtualservice_with_hostname_annotation
=== RUN   TestVirtualService/Endpoints/virtualservice_with_hostname_annotation_having_multiple_hostnames,_restricted_by_gw.hosts
=== PAUSE TestVirtualService/Endpoints/virtualservice_with_hostname_annotation_having_multiple_hostnames,_restricted_by_gw.hosts
=== RUN   TestVirtualService/Endpoints/virtualservices_with_annotation_and_custom_TTL
=== PAUSE TestVirtualService/Endpoints/virtualservices_with_annotation_and_custom_TTL
=== RUN   TestVirtualService/Endpoints/template_for_virtualservice;_gateway_with_target_annotation
=== PAUSE TestVirtualService/Endpoints/template_for_virtualservice;_gateway_with_target_annotation
=== RUN   TestVirtualService/Endpoints/ignore_hostname_annotations
=== PAUSE TestVirtualService/Endpoints/ignore_hostname_annotations
=== RUN   TestVirtualService/Endpoints/complex_setup_with_multiple_gateways_and_multiple_vs.hosts_only_matching_some_of_the_gateway
=== PAUSE TestVirtualService/Endpoints/complex_setup_with_multiple_gateways_and_multiple_vs.hosts_only_matching_some_of_the_gateway
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_gateway,_two_ingressgateway_loadbalancer_hostnames
=== RUN   TestGateway/endpointsFromGatewayConfig/one_gateway,_ingress_in_seperate_namespace
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_gateway,_ingress_in_seperate_namespace
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.externalIP
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.externalIP
=== RUN   TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP,_two_lb.Hostname_and_two_lb.externalIP
=== PAUSE TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP,_two_lb.Hostname_and_two_lb.externalIP
=== CONT  TestGateway/Endpoints
=== CONT  TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_route_status_target
=== RUN   TestGateway/Endpoints/no_gateway
=== PAUSE TestGateway/Endpoints/no_gateway
=== RUN   TestGateway/Endpoints/two_simple_gateways,_one_ingressgateway_loadbalancer_service
=== PAUSE TestGateway/Endpoints/two_simple_gateways,_one_ingressgateway_loadbalancer_service
=== RUN   TestGateway/Endpoints/two_simple_gateways_on_different_namespaces,_one_ingressgateway_loadbalancer_service
=== PAUSE TestGateway/Endpoints/two_simple_gateways_on_different_namespaces,_one_ingressgateway_loadbalancer_service
=== RUN   TestGateway/Endpoints/two_simple_gateways_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service
=== PAUSE TestGateway/Endpoints/two_simple_gateways_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service
=== RUN   TestGateway/Endpoints/one_simple_gateways_on_different_namespace_and_a_target_namespace,_one_ingress_service
=== PAUSE TestGateway/Endpoints/one_simple_gateways_on_different_namespace_and_a_target_namespace,_one_ingress_service
=== RUN   TestGateway/Endpoints/valid_matching_annotation_filter_expression
=== PAUSE TestGateway/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestGateway/Endpoints/valid_non-matching_annotation_filter_expression
=== PAUSE TestGateway/Endpoints/valid_non-matching_annotation_filter_expression
=== RUN   TestGateway/Endpoints/invalid_annotation_filter_expression
=== PAUSE TestGateway/Endpoints/invalid_annotation_filter_expression
=== RUN   TestGateway/Endpoints/valid_matching_annotation_filter_label
=== CONT  TestOcpRouteSource/Endpoints/route_admitted_by_first_appropriate_router
=== PAUSE TestGateway/Endpoints/valid_matching_annotation_filter_label
=== RUN   TestGateway/Endpoints/valid_non-matching_annotation_filter_label
=== PAUSE TestGateway/Endpoints/valid_non-matching_annotation_filter_label
=== RUN   TestGateway/Endpoints/our_controller_type_is_dns-controller
=== PAUSE TestGateway/Endpoints/our_controller_type_is_dns-controller
=== RUN   TestGateway/Endpoints/different_controller_types_are_ignored
=== PAUSE TestGateway/Endpoints/different_controller_types_are_ignored
=== RUN   TestGateway/Endpoints/template_for_gateway_if_host_is_missing
=== PAUSE TestGateway/Endpoints/template_for_gateway_if_host_is_missing
=== RUN   TestGateway/Endpoints/another_controller_annotation_skipped_even_with_template
=== PAUSE TestGateway/Endpoints/another_controller_annotation_skipped_even_with_template
=== RUN   TestGateway/Endpoints/multiple_FQDN_template_hostnames
=== PAUSE TestGateway/Endpoints/multiple_FQDN_template_hostnames
=== RUN   TestGateway/Endpoints/multiple_FQDN_template_hostnames#01
=== PAUSE TestGateway/Endpoints/multiple_FQDN_template_hostnames#01
=== RUN   TestGateway/Endpoints/gateway_rules_with_annotation
=== PAUSE TestGateway/Endpoints/gateway_rules_with_annotation
=== RUN   TestGateway/Endpoints/gateway_rules_with_hostname_annotation
=== PAUSE TestGateway/Endpoints/gateway_rules_with_hostname_annotation
=== RUN   TestGateway/Endpoints/gateway_rules_with_hostname_annotation_having_multiple_hostnames
=== PAUSE TestGateway/Endpoints/gateway_rules_with_hostname_annotation_having_multiple_hostnames
=== RUN   TestGateway/Endpoints/gateway_rules_with_hostname_and_target_annotation
=== PAUSE TestGateway/Endpoints/gateway_rules_with_hostname_and_target_annotation
=== RUN   TestGateway/Endpoints/gateway_rules_with_hostname,_target_and_ingress_annotation
=== PAUSE TestGateway/Endpoints/gateway_rules_with_hostname,_target_and_ingress_annotation
=== RUN   TestGateway/Endpoints/gateway_rules_with_annotation_and_custom_TTL
=== PAUSE TestGateway/Endpoints/gateway_rules_with_annotation_and_custom_TTL
=== RUN   TestGateway/Endpoints/template_for_gateway_with_annotation
=== PAUSE TestGateway/Endpoints/template_for_gateway_with_annotation
=== RUN   TestGateway/Endpoints/Ingress_with_empty_annotation
=== PAUSE TestGateway/Endpoints/Ingress_with_empty_annotation
=== RUN   TestGateway/Endpoints/Gateway_with_empty_ingress_annotation
=== PAUSE TestGateway/Endpoints/Gateway_with_empty_ingress_annotation
=== RUN   TestGateway/Endpoints/ignore_hostname_annotations
=== PAUSE TestGateway/Endpoints/ignore_hostname_annotations
=== RUN   TestGateway/Endpoints/gateways_with_wildcard_host
=== PAUSE TestGateway/Endpoints/gateways_with_wildcard_host
=== RUN   TestGateway/Endpoints/gateways_with_wildcard_host_and_hostname_annotation
=== PAUSE TestGateway/Endpoints/gateways_with_wildcard_host_and_hostname_annotation
=== RUN   TestGateway/Endpoints/gateways_with_ingress_annotation;_ingress_not_found
=== PAUSE TestGateway/Endpoints/gateways_with_ingress_annotation;_ingress_not_found
=== CONT  TestOcpRouteSource/Endpoints/route_without_matching_labels
=== CONT  TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_annotation_target
=== CONT  TestOcpRouteSource/Endpoints/route_with_matching_labels
=== CONT  TestOcpRouteSource/Endpoints/route_with_incorrect_externalDNS_controller_annotation
=== CONT  TestOcpRouteSource/Endpoints/route_not_admitted_by_the_given_router
=== CONT  TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target,_one_ocpRouterName_and_two_router_canonical_names
=== CONT  TestOcpRouteSource/Endpoints/route_not_admitted_by_any_router
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy
=== CONT  TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target_and_ocpRouterName_defined
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.hostname
=== CONT  TestHTTPProxy/Endpoints
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.hostname
--- PASS: TestNodeSource (0.00s)
    --- PASS: TestNodeSource/NewNodeSource (0.00s)
        --- PASS: TestNodeSource/NewNodeSource/invalid_template (0.00s)
        --- PASS: TestNodeSource/NewNodeSource/valid_template (0.10s)
        --- PASS: TestNodeSource/NewNodeSource/non-empty_annotation_filter_label (0.10s)
        --- PASS: TestNodeSource/NewNodeSource/valid_empty_template (0.10s)
    --- PASS: TestNodeSource/Endpoints (0.00s)
        --- PASS: TestNodeSource/Endpoints/node_with_short_hostname_returns_one_endpoint (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_target_annotation (0.10s)
        --- PASS: TestNodeSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL (0.10s)
        --- PASS: TestNodeSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false (0.10s)
        --- PASS: TestNodeSource/Endpoints/different_controller_types_are_ignored (0.10s)
        --- PASS: TestNodeSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false (0.10s)
        --- PASS: TestNodeSource/Endpoints/labeled_node_with_non-matching_label_selector_returns_nothing (0.10s)
        --- PASS: TestNodeSource/Endpoints/our_controller_type_is_dns-controller (0.10s)
        --- PASS: TestNodeSource/Endpoints/annotated_node_with_non-matching_annotation_filter_returns_nothing (0.10s)
        --- PASS: TestNodeSource/Endpoints/annotated_node_with_matching_annotation_filter_returns_endpoint (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_dual-stack_IP_addresses_and_expanded_hostname (0.10s)
        --- PASS: TestNodeSource/Endpoints/labeled_node_with_matching_label_selector_returns_endpoint (0.10s)
        --- PASS: TestNodeSource/Endpoints/annotated_node_without_annotation_filter_returns_endpoint (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_neither_external_nor_internal_IP_returns_no_endpoints (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_only_internal_IP_returns_an_endpoint_with_internal_IP (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_only_internal_IPs_returns_endpoints_with_internal_IPs (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_both_external,_internal,_and_IPv6_IP_returns_endpoints_with_external_IPs (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_both_external_and_internal_IP_returns_an_endpoint_with_external_IP (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_fqdn_template_returns_two_endpoints_with_multiple_IP_addresses_and_expanded_hostname (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_fqdn_template_returns_endpoint_with_expanded_hostname (0.10s)
        --- PASS: TestNodeSource/Endpoints/ipv6_node_with_fqdn_returns_one_endpoint (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_fqdn_and_fqdn_template_returns_one_endpoint (0.10s)
        --- PASS: TestNodeSource/Endpoints/node_with_fqdn_returns_one_endpoint (0.10s)
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.IP
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.IP
=== RUN   TestHTTPProxy/Endpoints/no_httpproxy
=== PAUSE TestHTTPProxy/Endpoints/no_httpproxy
=== RUN   TestHTTPProxy/Endpoints/two_simple_httpproxys
=== PAUSE TestHTTPProxy/Endpoints/two_simple_httpproxys
=== RUN   TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces
=== PAUSE TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces
=== RUN   TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces_and_a_target_namespace
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== PAUSE TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces_and_a_target_namespace
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== RUN   TestHTTPProxy/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy/no_rule.host
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy/no_rule.host
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy/no_targets
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy/no_targets
=== RUN   TestHTTPProxy/endpointsFromHTTPProxy/delegate_httpproxy
=== PAUSE TestHTTPProxy/endpointsFromHTTPProxy/delegate_httpproxy
=== PAUSE TestHTTPProxy/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestServiceSource/NewServiceSource
=== PAUSE TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_expression
=== RUN   TestHTTPProxy/Endpoints/invalid_annotation_filter_expression
=== RUN   TestServiceSource/NewServiceSource/invalid_template
=== PAUSE TestServiceSource/NewServiceSource/invalid_template
=== RUN   TestServiceSource/NewServiceSource/valid_empty_template
=== PAUSE TestServiceSource/NewServiceSource/valid_empty_template
=== RUN   TestServiceSource/NewServiceSource/valid_template
=== PAUSE TestServiceSource/NewServiceSource/valid_template
=== RUN   TestServiceSource/NewServiceSource/non-empty_annotation_filter_label
=== PAUSE TestServiceSource/NewServiceSource/non-empty_annotation_filter_label
=== PAUSE TestHTTPProxy/Endpoints/invalid_annotation_filter_expression
=== RUN   TestServiceSource/NewServiceSource/non-empty_service_types_filter
=== RUN   TestHTTPProxy/Endpoints/valid_matching_annotation_filter_label
=== PAUSE TestHTTPProxy/Endpoints/valid_matching_annotation_filter_label
=== RUN   TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_label
=== PAUSE TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_label
=== RUN   TestHTTPProxy/Endpoints/our_controller_type_is_dns-controller
=== PAUSE TestHTTPProxy/Endpoints/our_controller_type_is_dns-controller
=== RUN   TestHTTPProxy/Endpoints/different_controller_types_are_ignored
=== PAUSE TestHTTPProxy/Endpoints/different_controller_types_are_ignored
=== RUN   TestHTTPProxy/Endpoints/template_for_httpproxy_if_host_is_missing
=== PAUSE TestHTTPProxy/Endpoints/template_for_httpproxy_if_host_is_missing
=== RUN   TestHTTPProxy/Endpoints/another_controller_annotation_skipped_even_with_template
=== PAUSE TestHTTPProxy/Endpoints/another_controller_annotation_skipped_even_with_template
=== RUN   TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames
=== PAUSE TestServiceSource/NewServiceSource/non-empty_service_types_filter
=== PAUSE TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames
=== RUN   TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames#01
=== CONT  TestServiceSource/MultipleServices
=== PAUSE TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames#01
=== RUN   TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation
=== RUN   TestServiceSource/MultipleServices/test_service_returns_a_correct_end_point
=== PAUSE TestServiceSource/MultipleServices/test_service_returns_a_correct_end_point
=== RUN   TestServiceSource/MultipleServices/multiple_services_that_share_same_DNS_should_be_merged_into_one_endpoint
=== PAUSE TestServiceSource/MultipleServices/multiple_services_that_share_same_DNS_should_be_merged_into_one_endpoint
=== PAUSE TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation
=== RUN   TestServiceSource/MultipleServices/test_that_services_with_different_hostnames_do_not_get_merged_together
=== RUN   TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation
=== PAUSE TestServiceSource/MultipleServices/test_that_services_with_different_hostnames_do_not_get_merged_together
=== PAUSE TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation
=== RUN   TestServiceSource/MultipleServices/test_that_services_with_different_set-identifier_do_not_get_merged_together
=== PAUSE TestServiceSource/MultipleServices/test_that_services_with_different_set-identifier_do_not_get_merged_together
=== CONT  TestServiceSource/Endpoints
=== RUN   TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation_having_multiple_hostnames
=== PAUSE TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation_having_multiple_hostnames
=== RUN   TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints
=== RUN   TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_and_target_annotation
=== PAUSE TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints
=== PAUSE TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_and_target_annotation
=== RUN   TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation_and_custom_TTL
=== PAUSE TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation_and_custom_TTL
=== RUN   TestHTTPProxy/Endpoints/template_for_httpproxy_with_annotation
=== RUN   TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints_when_ignoring_annotations
=== PAUSE TestHTTPProxy/Endpoints/template_for_httpproxy_with_annotation
=== PAUSE TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints_when_ignoring_annotations
=== RUN   TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_IP
=== PAUSE TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_IP
=== RUN   TestHTTPProxy/Endpoints/httpproxy_with_empty_annotation
=== RUN   TestServiceSource/Endpoints/hostname_annotation_on_services_is_ignored
=== PAUSE TestHTTPProxy/Endpoints/httpproxy_with_empty_annotation
=== PAUSE TestServiceSource/Endpoints/hostname_annotation_on_services_is_ignored
=== RUN   TestHTTPProxy/Endpoints/ignore_hostname_annotations
=== PAUSE TestHTTPProxy/Endpoints/ignore_hostname_annotations
=== CONT  TestIngress/endpointsFromIngress
=== RUN   TestServiceSource/Endpoints/annotated_ClusterIp_aren't_processed_without_explicit_authorization
=== RUN   TestIngress/endpointsFromIngress/one_rule.host_one_lb.hostname
=== CONT  TestIngress/Endpoints
=== PAUSE TestServiceSource/Endpoints/annotated_ClusterIp_aren't_processed_without_explicit_authorization
=== RUN   TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== PAUSE TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== RUN   TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP_when_ignoring_annotations
=== RUN   TestIngress/endpointsFromIngress/one_rule.host_one_lb.IP
=== PAUSE TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP_when_ignoring_annotations
=== RUN   TestIngress/Endpoints/no_ingress
=== RUN   TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== PAUSE TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== RUN   TestIngress/endpointsFromIngress/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== RUN   TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_while_ignoring_annotations_will_only_return_FQDN_endpoints
=== PAUSE TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_while_ignoring_annotations_will_only_return_FQDN_endpoints
=== PAUSE TestIngress/Endpoints/no_ingress
=== RUN   TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== RUN   TestIngress/endpointsFromIngress/no_rule.host
=== RUN   TestIngress/Endpoints/two_simple_ingresses
=== PAUSE TestIngress/Endpoints/two_simple_ingresses
=== RUN   TestIngress/endpointsFromIngress/one_empty_rule.host
=== RUN   TestIngress/Endpoints/ipv6_ingress
=== PAUSE TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== RUN   TestIngress/endpointsFromIngress/no_targets
=== RUN   TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_and_without_trailing_period_return_an_endpoint_with_target_IP
=== RUN   TestIngress/endpointsFromIngress/ignore_rules_with_one_rule.host_one_lb.hostname
=== PAUSE TestIngress/Endpoints/ipv6_ingress
=== RUN   TestIngress/endpointsFromIngress/invalid_hostname_does_not_generate_endpoints
=== RUN   TestIngress/Endpoints/ignore_rules
=== PAUSE TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_and_without_trailing_period_return_an_endpoint_with_target_IP
=== PAUSE TestIngress/Endpoints/ignore_rules
=== RUN   TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces
=== PAUSE TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces
=== RUN   TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_hostname
=== CONT  TestTargetFilterSource/Endpoints/filter_exclusion_all
=== PAUSE TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_hostname
=== CONT  TestTargetFilterSource/Endpoints/filter_only_internal
=== RUN   TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_hostname_then_resolve_hostname
=== PAUSE TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_hostname_then_resolve_hostname
=== RUN   TestServiceSource/Endpoints/annotated_services_can_omit_trailing_dot
=== PAUSE TestServiceSource/Endpoints/annotated_services_can_omit_trailing_dot
=== RUN   TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces_with_target_namespace
=== PAUSE TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces_with_target_namespace
=== RUN   TestIngress/Endpoints/valid_matching_annotation_filter_expression
=== PAUSE TestIngress/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestIngress/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestTargetFilterSource/Endpoints/filter_exclude_internal_net
=== PAUSE TestIngress/Endpoints/valid_non-matching_annotation_filter_expression
=== RUN   TestIngress/Endpoints/invalid_annotation_filter_expression
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.hostname
=== PAUSE TestIngress/Endpoints/invalid_annotation_filter_expression
=== RUN   TestIngress/Endpoints/valid_matching_annotation_filter_label
=== PAUSE TestIngress/Endpoints/valid_matching_annotation_filter_label
=== RUN   TestIngress/Endpoints/valid_non-matching_annotation_filter_label
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.gateway
=== PAUSE TestIngress/Endpoints/valid_non-matching_annotation_filter_label
=== RUN   TestIngress/Endpoints/our_controller_type_is_dns-controller
=== PAUSE TestIngress/Endpoints/our_controller_type_is_dns-controller
=== RUN   TestIngress/Endpoints/different_controller_types_are_ignored
=== PAUSE TestIngress/Endpoints/different_controller_types_are_ignored
=== RUN   TestServiceSource/Endpoints/our_controller_type_is_kops_dns_controller
=== PAUSE TestServiceSource/Endpoints/our_controller_type_is_kops_dns_controller
--- PASS: TestConnectorSource (1.85s)
    --- PASS: TestConnectorSource/Interface (0.00s)
    --- PASS: TestConnectorSource/Endpoints (0.00s)
        --- PASS: TestConnectorSource/Endpoints/invalid_remote_server (0.00s)
        --- PASS: TestConnectorSource/Endpoints/valid_remote_server (0.00s)
        --- PASS: TestConnectorSource/Endpoints/valid_remote_server_with_no_endpoints (0.00s)
        --- PASS: TestConnectorSource/Endpoints/valid_remote_server_with_multiple_endpoints (0.00s)
=== RUN   TestIngress/Endpoints/template_for_ingress_if_host_is_missing
=== PAUSE TestIngress/Endpoints/template_for_ingress_if_host_is_missing
=== RUN   TestIngress/Endpoints/another_controller_annotation_skipped_even_with_template
--- PASS: TestTargetFilterSource (0.00s)
    --- PASS: TestTargetFilterSource/Interface (0.00s)
    --- PASS: TestTargetFilterSource/Endpoints (0.00s)
        --- PASS: TestTargetFilterSource/Endpoints/filter_exclusion_all (0.00s)
        --- PASS: TestTargetFilterSource/Endpoints/filter_only_internal (0.00s)
        --- PASS: TestTargetFilterSource/Endpoints/filter_exclude_internal_net (0.00s)
=== PAUSE TestIngress/Endpoints/another_controller_annotation_skipped_even_with_template
=== RUN   TestIngress/Endpoints/multiple_FQDN_template_hostnames
=== PAUSE TestIngress/Endpoints/multiple_FQDN_template_hostnames
=== RUN   TestIngress/Endpoints/multiple_FQDN_template_hostnames#01
=== PAUSE TestIngress/Endpoints/multiple_FQDN_template_hostnames#01
=== RUN   TestIngress/Endpoints/ingress_rules_with_annotation
=== RUN   TestServiceSource/Endpoints/different_controller_types_are_ignored_even_(with_template_specified)
=== PAUSE TestIngress/Endpoints/ingress_rules_with_annotation
=== PAUSE TestServiceSource/Endpoints/different_controller_types_are_ignored_even_(with_template_specified)
=== RUN   TestIngress/Endpoints/ingress_rules_with_single_tls_having_single_hostname
=== PAUSE TestIngress/Endpoints/ingress_rules_with_single_tls_having_single_hostname
=== RUN   TestServiceSource/Endpoints/services_are_found_in_target_namespace
=== RUN   TestIngress/Endpoints/ingress_rules_with_single_tls_having_multiple_hostnames
=== PAUSE TestServiceSource/Endpoints/services_are_found_in_target_namespace
=== PAUSE TestIngress/Endpoints/ingress_rules_with_single_tls_having_multiple_hostnames
=== RUN   TestServiceSource/Endpoints/services_that_are_not_in_target_namespace_are_ignored
=== RUN   TestIngress/Endpoints/ingress_rules_with_multiple_tls_having_multiple_hostnames
=== PAUSE TestServiceSource/Endpoints/services_that_are_not_in_target_namespace_are_ignored
=== PAUSE TestIngress/Endpoints/ingress_rules_with_multiple_tls_having_multiple_hostnames
=== RUN   TestServiceSource/Endpoints/services_are_found_in_all_namespaces
=== RUN   TestIngress/Endpoints/ingress_rules_with_hostname_annotation
=== PAUSE TestServiceSource/Endpoints/services_are_found_in_all_namespaces
=== PAUSE TestIngress/Endpoints/ingress_rules_with_hostname_annotation
=== RUN   TestServiceSource/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestIngress/Endpoints/ingress_rules_with_hostname_annotation_having_multiple_hostnames
=== PAUSE TestServiceSource/Endpoints/valid_matching_annotation_filter_expression
=== RUN   TestServiceSource/Endpoints/valid_non-matching_annotation_filter_expression
=== PAUSE TestServiceSource/Endpoints/valid_non-matching_annotation_filter_expression
=== RUN   TestServiceSource/Endpoints/invalid_annotation_filter_expression
=== PAUSE TestIngress/Endpoints/ingress_rules_with_hostname_annotation_having_multiple_hostnames
=== PAUSE TestServiceSource/Endpoints/invalid_annotation_filter_expression
=== RUN   TestIngress/Endpoints/ingress_rules_with_hostname_and_target_annotation
=== PAUSE TestIngress/Endpoints/ingress_rules_with_hostname_and_target_annotation
=== RUN   TestServiceSource/Endpoints/valid_matching_annotation_filter_label
=== PAUSE TestServiceSource/Endpoints/valid_matching_annotation_filter_label
=== RUN   TestIngress/Endpoints/ingress_rules_with_annotation_and_custom_TTL
=== PAUSE TestIngress/Endpoints/ingress_rules_with_annotation_and_custom_TTL
=== RUN   TestServiceSource/Endpoints/valid_non-matching_annotation_filter_label
=== PAUSE TestServiceSource/Endpoints/valid_non-matching_annotation_filter_label
=== RUN   TestServiceSource/Endpoints/no_external_entrypoints_return_no_endpoints
=== PAUSE TestServiceSource/Endpoints/no_external_entrypoints_return_no_endpoints
=== RUN   TestServiceSource/Endpoints/annotated_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets
=== PAUSE TestServiceSource/Endpoints/annotated_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets
=== RUN   TestIngress/Endpoints/ingress_rules_with_alias_and_target_annotation
=== RUN   TestServiceSource/Endpoints/multiple_external_entrypoints_return_a_single_endpoint_with_multiple_targets
=== PAUSE TestIngress/Endpoints/ingress_rules_with_alias_and_target_annotation
=== PAUSE TestServiceSource/Endpoints/multiple_external_entrypoints_return_a_single_endpoint_with_multiple_targets
=== RUN   TestIngress/Endpoints/ingress_rules_with_alias_set_false_and_target_annotation
=== PAUSE TestIngress/Endpoints/ingress_rules_with_alias_set_false_and_target_annotation
=== RUN   TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_are_ignored_in_default_mode
=== RUN   TestIngress/Endpoints/template_for_ingress_with_annotation
=== PAUSE TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_are_ignored_in_default_mode
=== RUN   TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_return_an_endpoint_in_compatibility_mode
=== PAUSE TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_return_an_endpoint_in_compatibility_mode
=== RUN   TestServiceSource/Endpoints/services_annotated_with_legacy_molecule_annotations_return_an_endpoint_in_compatibility_mode
=== PAUSE TestServiceSource/Endpoints/services_annotated_with_legacy_molecule_annotations_return_an_endpoint_in_compatibility_mode
=== PAUSE TestIngress/Endpoints/template_for_ingress_with_annotation
=== RUN   TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_A_and_CNAME_targets_in_compatibility_mode
=== PAUSE TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_A_and_CNAME_targets_in_compatibility_mode
=== RUN   TestIngress/Endpoints/Ingress_with_empty_annotation
=== PAUSE TestIngress/Endpoints/Ingress_with_empty_annotation
=== RUN   TestIngress/Endpoints/ignore_hostname_annotation
=== PAUSE TestIngress/Endpoints/ignore_hostname_annotation
=== RUN   TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_both_annotations_in_compatibility_mode
=== RUN   TestIngress/Endpoints/ignore_tls_section
=== PAUSE TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_both_annotations_in_compatibility_mode
=== RUN   TestServiceSource/Endpoints/not_annotated_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== PAUSE TestIngress/Endpoints/ignore_tls_section
=== PAUSE TestServiceSource/Endpoints/not_annotated_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== RUN   TestIngress/Endpoints/reading_tls_section
=== RUN   TestServiceSource/Endpoints/annotated_services_with_set_fqdnTemplate_annotation_takes_precedence
=== PAUSE TestServiceSource/Endpoints/annotated_services_with_set_fqdnTemplate_annotation_takes_precedence
=== PAUSE TestIngress/Endpoints/reading_tls_section
=== RUN   TestServiceSource/Endpoints/compatibility_annotated_services_with_tmpl._compatibility_takes_precedence
=== RUN   TestIngress/Endpoints/ingressClassName_filtering
=== PAUSE TestServiceSource/Endpoints/compatibility_annotated_services_with_tmpl._compatibility_takes_precedence
=== RUN   TestServiceSource/Endpoints/not_annotated_services_with_unknown_tmpl_field_should_not_return_anything
=== PAUSE TestServiceSource/Endpoints/not_annotated_services_with_unknown_tmpl_field_should_not_return_anything
=== RUN   TestServiceSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false
=== PAUSE TestServiceSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false
=== PAUSE TestIngress/Endpoints/ingressClassName_filtering
=== RUN   TestServiceSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false
=== RUN   TestIngress/Endpoints/ingress_with_matching_labels
=== PAUSE TestServiceSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false
=== PAUSE TestIngress/Endpoints/ingress_with_matching_labels
=== RUN   TestServiceSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL
=== PAUSE TestServiceSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL
=== RUN   TestServiceSource/Endpoints/ttl_annotated_(in_duration_format)_and_is_valid_should_set_Record.TTL
=== PAUSE TestServiceSource/Endpoints/ttl_annotated_(in_duration_format)_and_is_valid_should_set_Record.TTL
=== RUN   TestServiceSource/Endpoints/Negative_ttl_is_not_valid
=== PAUSE TestServiceSource/Endpoints/Negative_ttl_is_not_valid
=== RUN   TestIngress/Endpoints/ingress_without_matching_labels
=== RUN   TestServiceSource/Endpoints/filter_on_service_types_should_include_matching_services
=== PAUSE TestIngress/Endpoints/ingress_without_matching_labels
=== PAUSE TestServiceSource/Endpoints/filter_on_service_types_should_include_matching_services
=== RUN   TestServiceSource/Endpoints/filter_on_service_types_should_exclude_non-matching_services
=== PAUSE TestServiceSource/Endpoints/filter_on_service_types_should_exclude_non-matching_services
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_separate_namespace
=== RUN   TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_clusterip_services_return_an_endpoint_with_Cluster_IP
=== PAUSE TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_clusterip_services_return_an_endpoint_with_Cluster_IP
=== RUN   TestServiceSource/Endpoints/internal-host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP
=== PAUSE TestServiceSource/Endpoints/internal-host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_same_namespace
=== RUN   TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP_and_an_endpoint_with_lb_IP
=== PAUSE TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP_and_an_endpoint_with_lb_IP
=== RUN   TestServiceSource/Endpoints/service_with_matching_labels_and_fqdn_filter_should_be_included
=== PAUSE TestServiceSource/Endpoints/service_with_matching_labels_and_fqdn_filter_should_be_included
=== RUN   TestServiceSource/Endpoints/service_with_matching_labels_and_hostname_annotation_should_be_included
=== PAUSE TestServiceSource/Endpoints/service_with_matching_labels_and_hostname_annotation_should_be_included
=== RUN   TestServiceSource/Endpoints/service_without_matching_labels_and_fqdn_filter_should_be_excluded
=== PAUSE TestServiceSource/Endpoints/service_without_matching_labels_and_fqdn_filter_should_be_excluded
=== RUN   TestServiceSource/Endpoints/service_without_matching_labels_and_hostname_annotation_should_be_excluded
=== PAUSE TestServiceSource/Endpoints/service_without_matching_labels_and_hostname_annotation_should_be_excluded
=== RUN   TestServiceSource/Endpoints/dual-stack_load-balancer_service_gets_both_addresses
=== PAUSE TestServiceSource/Endpoints/dual-stack_load-balancer_service_gets_both_addresses
=== RUN   TestServiceSource/Endpoints/IPv6-only_load-balancer_service_gets_IPv6_endpoint
=== PAUSE TestServiceSource/Endpoints/IPv6-only_load-balancer_service_gets_IPv6_endpoint
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/matching_selectors_for_service_and_gateway
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/no_targets
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/one_empty_rule.host
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.host
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname_and_two_lb.externalIPs
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.IP
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.hostname
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.hostname
=== CONT  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.externalIPs
=== CONT  TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingressgateway_loadbalancer_service
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_separate_namespace
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== CONT  TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service_with_externalIPs
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_same_namespace
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== CONT  TestVirtualService/Endpoints/complex_setup_with_multiple_gateways_and_multiple_vs.hosts_only_matching_some_of_the_gateway
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/matching_selectors_for_service_and_gateway
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== CONT  TestVirtualService/Endpoints/ignore_hostname_annotations
=== CONT  TestVirtualService/Endpoints/template_for_virtualservice;_gateway_with_target_annotation
=== CONT  TestVirtualService/Endpoints/virtualservices_with_annotation_and_custom_TTL
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
    istio_virtualservice_test.go:708: expected 2 endpoints, got 0
=== CONT  TestVirtualService/Endpoints/virtualservice_with_hostname_annotation
=== CONT  TestVirtualService/Endpoints/virtualservice_with_hostname_annotation_having_multiple_hostnames,_restricted_by_gw.hosts
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname_and_two_lb.externalIPs
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.IP
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== CONT  TestVirtualService/Endpoints/virtualservice;_gateway_with_target_and_ingress_annotation
=== CONT  TestVirtualService/Endpoints/virtualservice;_gateway_with_target_annotation
=== NAME  TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.externalIPs
    istio_virtualservice_test.go:708: expected 1 endpoints, got 0
=== CONT  TestVirtualService/Endpoints/multiple_FQDN_template_hostnames_with_restricted_gw.hosts
=== CONT  TestVirtualService/Endpoints/virtualservice_with_target_annotation
=== CONT  TestVirtualService/Endpoints/multiple_FQDN_template_hostnames
=== CONT  TestVirtualService/Endpoints/template_for_virtualservice_if_host_is_missing
=== CONT  TestVirtualService/Endpoints/different_controller_types_are_ignored
=== CONT  TestVirtualService/Endpoints/our_controller_type_is_dns-controller
=== CONT  TestVirtualService/Endpoints/gateway_ingress_annotation;_ingress_not_found
=== CONT  TestVirtualService/Endpoints/invalid_annotation_filter_expression
=== CONT  TestVirtualService/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestVirtualService/Endpoints/valid_matching_annotation_filter_expression
=== CONT  TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingress
=== CONT  TestGateway/endpointsFromGatewayConfig/one_gateway,_two_ingressgateway_loadbalancer_hostnames
=== CONT  TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service
=== CONT  TestVirtualService/Endpoints/two_simple_virtualservices_on_different_namespaces_with_the_same_target_gateway,_one_ingressgateway_loadbalancer_service
=== CONT  TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service_with_externalIPs
=== CONT  TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service
=== CONT  TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingress
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP,_two_lb.Hostname_and_two_lb.externalIP
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.externalIP
=== CONT  TestGateway/endpointsFromGatewayConfig/one_gateway,_ingress_in_seperate_namespace
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_two_ingress.IP_and_two_ingress.Hostname
=== CONT  TestGateway/endpointsFromGatewayConfig/no_targets
=== CONT  TestGateway/endpointsFromGatewayConfig/one_empty_rule.host_with_gateway_ingress_annotation
=== CONT  TestGateway/endpointsFromGatewayConfig/one_empty_rule.host
=== CONT  TestGateway/endpointsFromGatewayConfig/no_rule.host
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_one_ingress.IP
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== CONT  TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.IP
=== CONT  TestGateway/endpointsFromGatewayConfig/one_namespaced_rule.host_one_lb.hostname
=== CONT  TestGateway/Endpoints/no_gateway
=== CONT  TestGateway/Endpoints/multiple_FQDN_template_hostnames#01
--- FAIL: TestVirtualService (0.11s)
    --- PASS: TestVirtualService/TestResourceLabelIsSet (0.10s)
    --- PASS: TestVirtualService/virtualServiceBindsToGateway (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_host_* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_host_*.<domain> (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_host_*.<domain> (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_host_*.<domain>#01 (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_host_*.<domain>#02 (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_host_*/* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_host_<namespace>/* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_host_./* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_host_./* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_host_<namespace>/* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_host_<namespace>/*#01 (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_exportTo_* (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/matching_exportTo_<namespace> (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_exportTo_<namespace> (0.00s)
        --- PASS: TestVirtualService/virtualServiceBindsToGateway/not_matching_exportTo_. (0.00s)
    --- PASS: TestVirtualService/gatewaySelectorMatchesService (0.00s)
        --- PASS: TestVirtualService/gatewaySelectorMatchesService/gw_selector_matches_lb_selector (0.00s)
        --- PASS: TestVirtualService/gatewaySelectorMatchesService/gw_selector_matches_lb_selector_partially (0.00s)
        --- PASS: TestVirtualService/gatewaySelectorMatchesService/gw_selector_does_not_match_lb_selector (0.00s)
    --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig (0.00s)
        --- PASS: TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.gateway (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.hostname (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_separate_namespace (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/ingress_gateway_annotation_same_namespace (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/matching_selectors_for_service_and_gateway (0.10s)
        --- PASS: TestVirtualService/endpointsFromVirtualServiceConfig/one_empty_rule.host (0.10s)
        --- PASS: TestVirtualService/endpointsFromVirtualServiceConfig/no_targets (0.10s)
        --- PASS: TestVirtualService/endpointsFromVirtualServiceConfig/no_rule.host (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname_and_two_lb.externalIPs (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.IP (0.10s)
        --- FAIL: TestVirtualService/endpointsFromVirtualServiceConfig/one_rule.host_one_lb.externalIPs (0.10s)
    --- PASS: TestVirtualService/Endpoints (0.00s)
        --- PASS: TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service_with_externalIPs (0.10s)
        --- PASS: TestVirtualService/Endpoints/complex_setup_with_multiple_gateways_and_multiple_vs.hosts_only_matching_some_of_the_gateway (0.10s)
        --- PASS: TestVirtualService/Endpoints/ignore_hostname_annotations (0.10s)
        --- PASS: TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingressgateway_loadbalancer_service (0.10s)
        --- PASS: TestVirtualService/Endpoints/virtualservices_with_annotation_and_custom_TTL (0.10s)
        --- PASS: TestVirtualService/Endpoints/template_for_virtualservice;_gateway_with_target_annotation (0.10s)
        --- PASS: TestVirtualService/Endpoints/virtualservice_with_hostname_annotation (0.10s)
        --- PASS: TestVirtualService/Endpoints/virtualservice_with_hostname_annotation_having_multiple_hostnames,_restricted_by_gw.hosts (0.10s)
        --- PASS: TestVirtualService/Endpoints/virtualservice;_gateway_with_target_and_ingress_annotation (0.10s)
        --- PASS: TestVirtualService/Endpoints/virtualservice;_gateway_with_target_annotation (0.10s)
        --- PASS: TestVirtualService/Endpoints/different_controller_types_are_ignored (0.10s)
        --- PASS: TestVirtualService/Endpoints/multiple_FQDN_template_hostnames_with_restricted_gw.hosts (0.10s)
        --- PASS: TestVirtualService/Endpoints/multiple_FQDN_template_hostnames (0.10s)
        --- PASS: TestVirtualService/Endpoints/virtualservice_with_target_annotation (0.10s)
        --- PASS: TestVirtualService/Endpoints/gateway_ingress_annotation;_ingress_not_found (0.10s)
        --- PASS: TestVirtualService/Endpoints/our_controller_type_is_dns-controller (0.10s)
        --- PASS: TestVirtualService/Endpoints/invalid_annotation_filter_expression (0.10s)
        --- PASS: TestVirtualService/Endpoints/template_for_virtualservice_if_host_is_missing (0.10s)
        --- PASS: TestVirtualService/Endpoints/valid_non-matching_annotation_filter_expression (0.10s)
        --- PASS: TestVirtualService/Endpoints/valid_matching_annotation_filter_expression (0.10s)
        --- PASS: TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingress (0.10s)
        --- PASS: TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service (0.10s)
        --- PASS: TestVirtualService/Endpoints/two_simple_virtualservices_with_one_gateway_each,_one_ingress (0.10s)
        --- PASS: TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service_with_externalIPs (0.10s)
        --- PASS: TestVirtualService/Endpoints/one_virtualservice_with_two_gateways,_one_ingressgateway_loadbalancer_service (0.10s)
        --- PASS: TestVirtualService/Endpoints/two_simple_virtualservices_on_different_namespaces_with_the_same_target_gateway,_one_ingressgateway_loadbalancer_service (0.10s)
=== CONT  TestGateway/Endpoints/gateways_with_ingress_annotation;_ingress_not_found
=== CONT  TestGateway/Endpoints/gateways_with_wildcard_host_and_hostname_annotation
=== CONT  TestGateway/Endpoints/multiple_FQDN_template_hostnames
=== CONT  TestGateway/Endpoints/another_controller_annotation_skipped_even_with_template
=== CONT  TestGateway/Endpoints/template_for_gateway_if_host_is_missing
=== CONT  TestGateway/Endpoints/different_controller_types_are_ignored
=== CONT  TestGateway/Endpoints/valid_non-matching_annotation_filter_label
=== CONT  TestGateway/Endpoints/invalid_annotation_filter_expression
=== CONT  TestGateway/Endpoints/our_controller_type_is_dns-controller
=== CONT  TestGateway/Endpoints/valid_matching_annotation_filter_label
=== CONT  TestGateway/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestGateway/Endpoints/valid_matching_annotation_filter_expression
=== CONT  TestGateway/Endpoints/one_simple_gateways_on_different_namespace_and_a_target_namespace,_one_ingress_service
=== CONT  TestGateway/Endpoints/two_simple_gateways_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service
=== CONT  TestGateway/Endpoints/two_simple_gateways_on_different_namespaces,_one_ingressgateway_loadbalancer_service
=== CONT  TestGateway/Endpoints/two_simple_gateways,_one_ingressgateway_loadbalancer_service
=== CONT  TestGateway/Endpoints/gateway_rules_with_annotation_and_custom_TTL
=== CONT  TestGateway/Endpoints/ignore_hostname_annotations
=== CONT  TestGateway/Endpoints/Gateway_with_empty_ingress_annotation
=== CONT  TestGateway/Endpoints/gateway_rules_with_hostname_annotation_having_multiple_hostnames
=== CONT  TestGateway/Endpoints/Ingress_with_empty_annotation
=== CONT  TestGateway/Endpoints/template_for_gateway_with_annotation
=== CONT  TestGateway/Endpoints/gateway_rules_with_hostname,_target_and_ingress_annotation
=== CONT  TestGateway/Endpoints/gateway_rules_with_hostname_and_target_annotation
=== CONT  TestGateway/Endpoints/gateway_rules_with_hostname_annotation
=== CONT  TestGateway/Endpoints/gateway_rules_with_annotation
=== CONT  TestGateway/Endpoints/gateways_with_wildcard_host
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy/no_targets
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.hostname
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy/delegate_httpproxy
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_two_lb.IP_and_two_lb.Hostname
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy/no_rule.host
=== CONT  TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.IP
=== CONT  TestServiceSource/NewServiceSource/invalid_template
=== CONT  TestServiceSource/NewServiceSource/non-empty_annotation_filter_label
=== CONT  TestServiceSource/NewServiceSource/non-empty_service_types_filter
=== CONT  TestServiceSource/NewServiceSource/valid_template
=== CONT  TestServiceSource/NewServiceSource/valid_empty_template
=== CONT  TestServiceSource/MultipleServices/test_service_returns_a_correct_end_point
--- PASS: TestGateway (0.10s)
    --- PASS: TestGateway/TestResourceLabelIsSet (0.10s)
    --- PASS: TestGateway/endpointsFromGatewayConfig (0.00s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.hostname (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_gateway,_two_ingressgateway_loadbalancer_hostnames (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_gateway,_ingress_in_seperate_namespace (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP,_two_lb.Hostname_and_two_lb.externalIP (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.externalIP (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/no_targets (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_two_ingress.IP_and_two_ingress.Hostname (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_empty_rule.host_with_gateway_ingress_annotation (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_empty_rule.host (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/no_rule.host (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_two_lb.IP_and_two_lb.Hostname (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_one_lb.IP (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_namespaced_rule.host_one_lb.hostname (0.10s)
        --- PASS: TestGateway/endpointsFromGatewayConfig/one_rule.host_one_ingress.IP (0.10s)
    --- PASS: TestGateway/Endpoints (0.00s)
        --- PASS: TestGateway/Endpoints/no_gateway (0.10s)
        --- PASS: TestGateway/Endpoints/multiple_FQDN_template_hostnames#01 (0.10s)
        --- PASS: TestGateway/Endpoints/gateways_with_ingress_annotation;_ingress_not_found (0.10s)
        --- PASS: TestGateway/Endpoints/multiple_FQDN_template_hostnames (0.10s)
        --- PASS: TestGateway/Endpoints/gateways_with_wildcard_host_and_hostname_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/another_controller_annotation_skipped_even_with_template (0.10s)
        --- PASS: TestGateway/Endpoints/template_for_gateway_if_host_is_missing (0.10s)
        --- PASS: TestGateway/Endpoints/different_controller_types_are_ignored (0.10s)
        --- PASS: TestGateway/Endpoints/our_controller_type_is_dns-controller (0.10s)
        --- PASS: TestGateway/Endpoints/invalid_annotation_filter_expression (0.10s)
        --- PASS: TestGateway/Endpoints/valid_non-matching_annotation_filter_label (0.10s)
        --- PASS: TestGateway/Endpoints/valid_matching_annotation_filter_label (0.10s)
        --- PASS: TestGateway/Endpoints/valid_matching_annotation_filter_expression (0.10s)
        --- PASS: TestGateway/Endpoints/valid_non-matching_annotation_filter_expression (0.10s)
        --- PASS: TestGateway/Endpoints/one_simple_gateways_on_different_namespace_and_a_target_namespace,_one_ingress_service (0.10s)
        --- PASS: TestGateway/Endpoints/two_simple_gateways_on_different_namespaces,_one_ingressgateway_loadbalancer_service (0.10s)
        --- PASS: TestGateway/Endpoints/two_simple_gateways_on_different_namespaces_and_a_target_namespace,_one_ingressgateway_loadbalancer_service (0.10s)
        --- PASS: TestGateway/Endpoints/two_simple_gateways,_one_ingressgateway_loadbalancer_service (0.10s)
        --- PASS: TestGateway/Endpoints/gateway_rules_with_annotation_and_custom_TTL (0.10s)
        --- PASS: TestGateway/Endpoints/gateway_rules_with_hostname,_target_and_ingress_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/Ingress_with_empty_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/template_for_gateway_with_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/ignore_hostname_annotations (0.10s)
        --- PASS: TestGateway/Endpoints/gateway_rules_with_hostname_annotation_having_multiple_hostnames (0.10s)
        --- PASS: TestGateway/Endpoints/Gateway_with_empty_ingress_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/gateway_rules_with_hostname_and_target_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/gateway_rules_with_hostname_annotation (0.10s)
        --- PASS: TestGateway/Endpoints/gateways_with_wildcard_host (0.10s)
        --- PASS: TestGateway/Endpoints/gateway_rules_with_annotation (0.10s)
=== CONT  TestServiceSource/MultipleServices/test_that_services_with_different_hostnames_do_not_get_merged_together
=== CONT  TestServiceSource/MultipleServices/test_that_services_with_different_set-identifier_do_not_get_merged_together
=== CONT  TestServiceSource/MultipleServices/multiple_services_that_share_same_DNS_should_be_merged_into_one_endpoint
=== CONT  TestHTTPProxy/Endpoints/no_httpproxy
=== CONT  TestHTTPProxy/Endpoints/ignore_hostname_annotations
=== CONT  TestHTTPProxy/Endpoints/httpproxy_with_empty_annotation
=== CONT  TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation_and_custom_TTL
=== CONT  TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_and_target_annotation
=== CONT  TestHTTPProxy/Endpoints/template_for_httpproxy_with_annotation
=== CONT  TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation_having_multiple_hostnames
=== CONT  TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation
=== CONT  TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation
=== CONT  TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames#01
=== CONT  TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames
=== CONT  TestHTTPProxy/Endpoints/another_controller_annotation_skipped_even_with_template
=== CONT  TestHTTPProxy/Endpoints/different_controller_types_are_ignored
=== CONT  TestHTTPProxy/Endpoints/our_controller_type_is_dns-controller
=== CONT  TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_label
=== CONT  TestHTTPProxy/Endpoints/template_for_httpproxy_if_host_is_missing
=== CONT  TestHTTPProxy/Endpoints/valid_matching_annotation_filter_label
=== CONT  TestHTTPProxy/Endpoints/invalid_annotation_filter_expression
=== CONT  TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestHTTPProxy/Endpoints/valid_matching_annotation_filter_expression
=== CONT  TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces
=== CONT  TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces_and_a_target_namespace
=== CONT  TestHTTPProxy/Endpoints/two_simple_httpproxys
=== CONT  TestIngress/Endpoints/no_ingress
=== CONT  TestIngress/Endpoints/ingress_rules_with_alias_set_false_and_target_annotation
=== CONT  TestIngress/Endpoints/ingress_rules_with_alias_and_target_annotation
=== CONT  TestIngress/Endpoints/ingress_rules_with_annotation_and_custom_TTL
=== CONT  TestIngress/Endpoints/template_for_ingress_with_annotation
=== CONT  TestIngress/Endpoints/ingress_rules_with_hostname_and_target_annotation
=== CONT  TestIngress/Endpoints/ingress_rules_with_hostname_annotation_having_multiple_hostnames
=== CONT  TestIngress/Endpoints/ingress_rules_with_hostname_annotation
=== CONT  TestIngress/Endpoints/ingress_rules_with_multiple_tls_having_multiple_hostnames
=== CONT  TestIngress/Endpoints/ingress_rules_with_single_tls_having_multiple_hostnames
=== CONT  TestIngress/Endpoints/ingress_rules_with_single_tls_having_single_hostname
=== CONT  TestIngress/Endpoints/ingress_rules_with_annotation
=== CONT  TestIngress/Endpoints/multiple_FQDN_template_hostnames#01
--- PASS: TestHTTPProxy (0.11s)
    --- PASS: TestHTTPProxy/TestResourceLabelIsSet (0.11s)
    --- PASS: TestHTTPProxy/endpointsFromHTTPProxy (0.00s)
        --- PASS: TestHTTPProxy/endpointsFromHTTPProxy/no_targets (0.10s)
        --- PASS: TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.hostname (0.10s)
        --- PASS: TestHTTPProxy/endpointsFromHTTPProxy/delegate_httpproxy (0.10s)
        --- PASS: TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_two_lb.IP_and_two_lb.Hostname (0.10s)
        --- PASS: TestHTTPProxy/endpointsFromHTTPProxy/one_rule.host_one_lb.IP (0.10s)
        --- PASS: TestHTTPProxy/endpointsFromHTTPProxy/no_rule.host (0.11s)
    --- PASS: TestHTTPProxy/Endpoints (0.00s)
        --- PASS: TestHTTPProxy/Endpoints/no_httpproxy (0.11s)
        --- PASS: TestHTTPProxy/Endpoints/template_for_httpproxy_with_annotation (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation_having_multiple_hostnames (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/ignore_hostname_annotations (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_annotation (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation_and_custom_TTL (0.11s)
        --- PASS: TestHTTPProxy/Endpoints/httpproxy_rules_with_hostname_and_target_annotation (0.11s)
        --- PASS: TestHTTPProxy/Endpoints/httpproxy_with_empty_annotation (0.11s)
        --- PASS: TestHTTPProxy/Endpoints/httpproxy_rules_with_annotation (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames#01 (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/another_controller_annotation_skipped_even_with_template (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/multiple_FQDN_template_hostnames (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/different_controller_types_are_ignored (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/our_controller_type_is_dns-controller (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/template_for_httpproxy_if_host_is_missing (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_label (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/valid_matching_annotation_filter_label (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/invalid_annotation_filter_expression (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/valid_non-matching_annotation_filter_expression (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/valid_matching_annotation_filter_expression (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/two_simple_httpproxys_on_different_namespaces_and_a_target_namespace (0.10s)
        --- PASS: TestHTTPProxy/Endpoints/two_simple_httpproxys (0.10s)
=== CONT  TestIngress/Endpoints/multiple_FQDN_template_hostnames
=== CONT  TestIngress/Endpoints/Ingress_with_empty_annotation
=== CONT  TestIngress/Endpoints/another_controller_annotation_skipped_even_with_template
=== CONT  TestIngress/Endpoints/template_for_ingress_if_host_is_missing
=== CONT  TestIngress/Endpoints/different_controller_types_are_ignored
=== CONT  TestIngress/Endpoints/our_controller_type_is_dns-controller
=== CONT  TestIngress/Endpoints/valid_non-matching_annotation_filter_label
=== CONT  TestIngress/Endpoints/ingress_without_matching_labels
=== CONT  TestIngress/Endpoints/valid_matching_annotation_filter_label
=== CONT  TestIngress/Endpoints/ingress_with_matching_labels
=== CONT  TestIngress/Endpoints/invalid_annotation_filter_expression
=== CONT  TestIngress/Endpoints/ingressClassName_filtering
=== CONT  TestIngress/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestIngress/Endpoints/valid_matching_annotation_filter_expression
=== CONT  TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces_with_target_namespace
=== CONT  TestIngress/Endpoints/reading_tls_section
=== CONT  TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces
=== CONT  TestIngress/Endpoints/ignore_rules
=== CONT  TestIngress/Endpoints/ignore_tls_section
=== CONT  TestIngress/Endpoints/ipv6_ingress
=== CONT  TestIngress/Endpoints/ignore_hostname_annotation
=== CONT  TestIngress/Endpoints/two_simple_ingresses
=== CONT  TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints
=== CONT  TestServiceSource/Endpoints/multiple_external_entrypoints_return_a_single_endpoint_with_multiple_targets
=== CONT  TestServiceSource/Endpoints/IPv6-only_load-balancer_service_gets_IPv6_endpoint
=== CONT  TestServiceSource/Endpoints/service_without_matching_labels_and_hostname_annotation_should_be_excluded
=== CONT  TestServiceSource/Endpoints/service_without_matching_labels_and_fqdn_filter_should_be_excluded
=== CONT  TestServiceSource/Endpoints/service_with_matching_labels_and_hostname_annotation_should_be_included
=== CONT  TestServiceSource/Endpoints/service_with_matching_labels_and_fqdn_filter_should_be_included
=== CONT  TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP_and_an_endpoint_with_lb_IP
=== CONT  TestServiceSource/Endpoints/internal-host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP
=== CONT  TestServiceSource/Endpoints/dual-stack_load-balancer_service_gets_both_addresses
=== CONT  TestServiceSource/Endpoints/filter_on_service_types_should_exclude_non-matching_services
--- PASS: TestIngress (0.21s)
    --- PASS: TestIngress/TestDualstackLabelIsSet (0.11s)
    --- PASS: TestIngress/TestResourceLabelIsSet (0.10s)
    --- PASS: TestIngress/endpointsFromIngressHostnameSourceAnnotation (0.00s)
        --- PASS: TestIngress/endpointsFromIngressHostnameSourceAnnotation/No_ingress-hostname-source_annotation,_one_rule.host,_one_annotation_host (0.00s)
        --- PASS: TestIngress/endpointsFromIngressHostnameSourceAnnotation/No_ingress-hostname-source_annotation,_one_rule.host (0.00s)
        --- PASS: TestIngress/endpointsFromIngressHostnameSourceAnnotation/No_ingress-hostname-source_annotation,_one_rule.host,_one_annotation_host#01 (0.00s)
        --- PASS: TestIngress/endpointsFromIngressHostnameSourceAnnotation/Ingress-hostname-source=defined-hosts-only,_one_rule.host,_one_annotation_host (0.00s)
        --- PASS: TestIngress/endpointsFromIngressHostnameSourceAnnotation/Ingress-hostname-source=annotation-only,_one_rule.host,_one_annotation_host (0.00s)
    --- PASS: TestIngress/endpointsFromIngress (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/one_rule.host_one_lb.hostname (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/one_rule.host_one_lb.IP (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/one_rule.host_two_lb.IP_and_two_lb.Hostname (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/no_rule.host (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/one_empty_rule.host (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/no_targets (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/ignore_rules_with_one_rule.host_one_lb.hostname (0.00s)
        --- PASS: TestIngress/endpointsFromIngress/invalid_hostname_does_not_generate_endpoints (0.00s)
    --- PASS: TestIngress/Endpoints (0.00s)
        --- PASS: TestIngress/Endpoints/no_ingress (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_hostname_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_hostname_and_target_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_annotation_and_custom_TTL (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_alias_set_false_and_target_annotation (0.11s)
        --- PASS: TestIngress/Endpoints/template_for_ingress_with_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_multiple_tls_having_multiple_hostnames (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_hostname_annotation_having_multiple_hostnames (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_alias_and_target_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_single_tls_having_multiple_hostnames (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_single_tls_having_single_hostname (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_rules_with_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/multiple_FQDN_template_hostnames#01 (0.10s)
        --- PASS: TestIngress/Endpoints/another_controller_annotation_skipped_even_with_template (0.10s)
        --- PASS: TestIngress/Endpoints/Ingress_with_empty_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/our_controller_type_is_dns-controller (0.10s)
        --- PASS: TestIngress/Endpoints/template_for_ingress_if_host_is_missing (0.10s)
        --- PASS: TestIngress/Endpoints/different_controller_types_are_ignored (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_without_matching_labels (0.10s)
        --- PASS: TestIngress/Endpoints/multiple_FQDN_template_hostnames (0.10s)
        --- PASS: TestIngress/Endpoints/valid_non-matching_annotation_filter_label (0.10s)
        --- PASS: TestIngress/Endpoints/valid_matching_annotation_filter_label (0.10s)
        --- PASS: TestIngress/Endpoints/ingress_with_matching_labels (0.10s)
        --- PASS: TestIngress/Endpoints/invalid_annotation_filter_expression (0.10s)
        --- PASS: TestIngress/Endpoints/ingressClassName_filtering (0.10s)
        --- PASS: TestIngress/Endpoints/reading_tls_section (0.10s)
        --- PASS: TestIngress/Endpoints/ipv6_ingress (0.10s)
        --- PASS: TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces (0.10s)
        --- PASS: TestIngress/Endpoints/ignore_rules (0.10s)
        --- PASS: TestIngress/Endpoints/ignore_tls_section (0.10s)
        --- PASS: TestIngress/Endpoints/two_simple_ingresses_on_different_namespaces_with_target_namespace (0.10s)
        --- PASS: TestIngress/Endpoints/valid_matching_annotation_filter_expression (0.10s)
        --- PASS: TestIngress/Endpoints/valid_non-matching_annotation_filter_expression (0.10s)
        --- PASS: TestIngress/Endpoints/ignore_hostname_annotation (0.10s)
        --- PASS: TestIngress/Endpoints/two_simple_ingresses (0.10s)
=== CONT  TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_clusterip_services_return_an_endpoint_with_Cluster_IP
=== CONT  TestServiceSource/Endpoints/filter_on_service_types_should_include_matching_services
=== CONT  TestServiceSource/Endpoints/Negative_ttl_is_not_valid
=== CONT  TestServiceSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL
=== CONT  TestServiceSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false
=== CONT  TestServiceSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false
=== CONT  TestServiceSource/Endpoints/not_annotated_services_with_unknown_tmpl_field_should_not_return_anything
=== CONT  TestServiceSource/Endpoints/ttl_annotated_(in_duration_format)_and_is_valid_should_set_Record.TTL
=== CONT  TestServiceSource/Endpoints/compatibility_annotated_services_with_tmpl._compatibility_takes_precedence
=== CONT  TestServiceSource/Endpoints/annotated_services_with_set_fqdnTemplate_annotation_takes_precedence
=== CONT  TestServiceSource/Endpoints/not_annotated_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP
=== CONT  TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_both_annotations_in_compatibility_mode
=== CONT  TestServiceSource/Endpoints/annotated_services_can_omit_trailing_dot
=== CONT  TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_A_and_CNAME_targets_in_compatibility_mode
=== CONT  TestServiceSource/Endpoints/annotated_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets
=== CONT  TestServiceSource/Endpoints/valid_non-matching_annotation_filter_label
=== CONT  TestServiceSource/Endpoints/invalid_annotation_filter_expression
=== CONT  TestServiceSource/Endpoints/valid_matching_annotation_filter_label
=== CONT  TestServiceSource/Endpoints/no_external_entrypoints_return_no_endpoints
=== CONT  TestServiceSource/Endpoints/valid_non-matching_annotation_filter_expression
=== CONT  TestServiceSource/Endpoints/services_annotated_with_legacy_molecule_annotations_return_an_endpoint_in_compatibility_mode
=== CONT  TestServiceSource/Endpoints/valid_matching_annotation_filter_expression
=== CONT  TestServiceSource/Endpoints/services_are_found_in_all_namespaces
=== CONT  TestServiceSource/Endpoints/services_that_are_not_in_target_namespace_are_ignored
=== CONT  TestServiceSource/Endpoints/services_are_found_in_target_namespace
=== CONT  TestServiceSource/Endpoints/different_controller_types_are_ignored_even_(with_template_specified)
=== CONT  TestServiceSource/Endpoints/our_controller_type_is_kops_dns_controller
=== CONT  TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== CONT  TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_hostname_then_resolve_hostname
=== CONT  TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_hostname
=== CONT  TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_and_without_trailing_period_return_an_endpoint_with_target_IP
=== CONT  TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== CONT  TestServiceSource/Endpoints/annotated_ClusterIp_aren't_processed_without_explicit_authorization
=== CONT  TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP_when_ignoring_annotations
=== CONT  TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_while_ignoring_annotations_will_only_return_FQDN_endpoints
=== CONT  TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_are_ignored_in_default_mode
=== CONT  TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP
=== CONT  TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_IP
=== CONT  TestServiceSource/Endpoints/hostname_annotation_on_services_is_ignored
=== CONT  TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints_when_ignoring_annotations
=== CONT  TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_return_an_endpoint_in_compatibility_mode
=== CONT  TestOcpRouteSource/NewOcpRouteSource
=== RUN   TestOcpRouteSource/NewOcpRouteSource/invalid_template
=== PAUSE TestOcpRouteSource/NewOcpRouteSource/invalid_template
=== RUN   TestOcpRouteSource/NewOcpRouteSource/valid_empty_template
=== PAUSE TestOcpRouteSource/NewOcpRouteSource/valid_empty_template
=== RUN   TestOcpRouteSource/NewOcpRouteSource/valid_template
=== PAUSE TestOcpRouteSource/NewOcpRouteSource/valid_template
=== RUN   TestOcpRouteSource/NewOcpRouteSource/non-empty_annotation_filter_label
=== PAUSE TestOcpRouteSource/NewOcpRouteSource/non-empty_annotation_filter_label
=== RUN   TestOcpRouteSource/NewOcpRouteSource/valid_label_selector
=== PAUSE TestOcpRouteSource/NewOcpRouteSource/valid_label_selector
=== CONT  TestOcpRouteSource/NewOcpRouteSource/invalid_template
=== CONT  TestOcpRouteSource/NewOcpRouteSource/valid_label_selector
=== CONT  TestOcpRouteSource/NewOcpRouteSource/non-empty_annotation_filter_label
=== CONT  TestOcpRouteSource/NewOcpRouteSource/valid_template
=== CONT  TestOcpRouteSource/NewOcpRouteSource/valid_empty_template
--- PASS: TestServiceSource (0.12s)
    --- PASS: TestServiceSource/TestResourceLabelIsSet (0.10s)
    --- PASS: TestServiceSource/Interface (0.00s)
    --- PASS: TestServiceSource/NewServiceSource (0.00s)
        --- PASS: TestServiceSource/NewServiceSource/invalid_template (0.00s)
        --- PASS: TestServiceSource/NewServiceSource/non-empty_annotation_filter_label (0.10s)
        --- PASS: TestServiceSource/NewServiceSource/non-empty_service_types_filter (0.10s)
        --- PASS: TestServiceSource/NewServiceSource/valid_template (0.10s)
        --- PASS: TestServiceSource/NewServiceSource/valid_empty_template (0.10s)
    --- PASS: TestServiceSource/MultipleServices (0.00s)
        --- PASS: TestServiceSource/MultipleServices/test_service_returns_a_correct_end_point (0.10s)
        --- PASS: TestServiceSource/MultipleServices/test_that_services_with_different_hostnames_do_not_get_merged_together (0.10s)
        --- PASS: TestServiceSource/MultipleServices/test_that_services_with_different_set-identifier_do_not_get_merged_together (0.10s)
        --- PASS: TestServiceSource/MultipleServices/multiple_services_that_share_same_DNS_should_be_merged_into_one_endpoint (0.10s)
    --- PASS: TestServiceSource/Endpoints (0.02s)
        --- PASS: TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints (0.10s)
        --- PASS: TestServiceSource/Endpoints/multiple_external_entrypoints_return_a_single_endpoint_with_multiple_targets (0.10s)
        --- PASS: TestServiceSource/Endpoints/service_without_matching_labels_and_fqdn_filter_should_be_excluded (0.10s)
        --- PASS: TestServiceSource/Endpoints/service_with_matching_labels_and_fqdn_filter_should_be_included (0.10s)
        --- PASS: TestServiceSource/Endpoints/service_with_matching_labels_and_hostname_annotation_should_be_included (0.10s)
        --- PASS: TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP_and_an_endpoint_with_lb_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/IPv6-only_load-balancer_service_gets_IPv6_endpoint (0.10s)
        --- PASS: TestServiceSource/Endpoints/internal-host_annotated_loadbalancer_services_return_an_endpoint_with_Cluster_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/service_without_matching_labels_and_hostname_annotation_should_be_excluded (0.10s)
        --- PASS: TestServiceSource/Endpoints/dual-stack_load-balancer_service_gets_both_addresses (0.10s)
        --- PASS: TestServiceSource/Endpoints/filter_on_service_types_should_exclude_non-matching_services (0.10s)
        --- PASS: TestServiceSource/Endpoints/internal-host_annotated_and_host_annotated_clusterip_services_return_an_endpoint_with_Cluster_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/filter_on_service_types_should_include_matching_services (0.10s)
        --- PASS: TestServiceSource/Endpoints/Negative_ttl_is_not_valid (0.10s)
        --- PASS: TestServiceSource/Endpoints/ttl_annotated_and_is_valid_should_set_Record.TTL (0.10s)
        --- PASS: TestServiceSource/Endpoints/ttl_annotated_(in_duration_format)_and_is_valid_should_set_Record.TTL (0.10s)
        --- PASS: TestServiceSource/Endpoints/ttl_annotated_but_invalid_should_have_RecordTTL.IsConfigured_set_to_false (0.10s)
        --- PASS: TestServiceSource/Endpoints/ttl_not_annotated_should_have_RecordTTL.IsConfigured_set_to_false (0.10s)
        --- PASS: TestServiceSource/Endpoints/not_annotated_services_with_unknown_tmpl_field_should_not_return_anything (0.10s)
        --- PASS: TestServiceSource/Endpoints/compatibility_annotated_services_with_tmpl._compatibility_takes_precedence (0.10s)
        --- PASS: TestServiceSource/Endpoints/not_annotated_services_with_set_fqdnTemplate_return_an_endpoint_with_target_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_with_set_fqdnTemplate_annotation_takes_precedence (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_can_omit_trailing_dot (0.10s)
        --- PASS: TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_both_annotations_in_compatibility_mode (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_service_with_externalIPs_returns_a_single_endpoint_with_multiple_targets (0.10s)
        --- PASS: TestServiceSource/Endpoints/load_balancer_services_annotated_with_DNS_Controller_annotations_return_an_endpoint_with_A_and_CNAME_targets_in_compatibility_mode (0.10s)
        --- PASS: TestServiceSource/Endpoints/valid_non-matching_annotation_filter_label (0.10s)
        --- PASS: TestServiceSource/Endpoints/invalid_annotation_filter_expression (0.10s)
        --- PASS: TestServiceSource/Endpoints/no_external_entrypoints_return_no_endpoints (0.10s)
        --- PASS: TestServiceSource/Endpoints/valid_matching_annotation_filter_label (0.10s)
        --- PASS: TestServiceSource/Endpoints/services_are_found_in_all_namespaces (0.10s)
        --- PASS: TestServiceSource/Endpoints/services_annotated_with_legacy_molecule_annotations_return_an_endpoint_in_compatibility_mode (0.10s)
        --- PASS: TestServiceSource/Endpoints/valid_matching_annotation_filter_expression (0.10s)
        --- PASS: TestServiceSource/Endpoints/valid_non-matching_annotation_filter_expression (0.10s)
        --- PASS: TestServiceSource/Endpoints/services_are_found_in_target_namespace (0.10s)
        --- PASS: TestServiceSource/Endpoints/services_that_are_not_in_target_namespace_are_ignored (0.11s)
        --- PASS: TestServiceSource/Endpoints/our_controller_type_is_kops_dns_controller (0.10s)
        --- PASS: TestServiceSource/Endpoints/different_controller_types_are_ignored_even_(with_template_specified) (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_ClusterIp_aren't_processed_without_explicit_authorization (0.10s)
        --- PASS: TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_return_an_endpoint_with_target_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_return_an_endpoint_with_target_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_with_multiple_hostnames_and_without_trailing_period_return_an_endpoint_with_target_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/FQDN_template_and_annotation_both_with_multiple_hostnames_while_ignoring_annotations_will_only_return_FQDN_endpoints (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_hostname (0.10s)
        --- PASS: TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP_when_ignoring_annotations (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_hostname_then_resolve_hostname (0.10s)
        --- PASS: TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_are_ignored_in_default_mode (0.10s)
        --- PASS: TestServiceSource/Endpoints/FQDN_template_with_multiple_hostnames_return_an_endpoint_with_target_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/annotated_services_return_an_endpoint_with_target_IP (0.10s)
        --- PASS: TestServiceSource/Endpoints/hostname_annotation_on_services_is_ignored (0.10s)
        --- PASS: TestServiceSource/Endpoints/no_annotated_services_return_no_endpoints_when_ignoring_annotations (0.10s)
        --- PASS: TestServiceSource/Endpoints/services_annotated_with_legacy_mate_annotations_return_an_endpoint_in_compatibility_mode (0.10s)
--- PASS: TestOcpRouteSource (3.57s)
    --- PASS: TestOcpRouteSource/TestResourceLabelIsSet (0.11s)
    --- PASS: TestOcpRouteSource/Interface (0.00s)
    --- PASS: TestOcpRouteSource/Endpoints (0.00s)
        --- PASS: TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_route_status_target (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_admitted_by_first_appropriate_router (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_without_matching_labels (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_with_basic_hostname_and_annotation_target (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_with_matching_labels (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_with_incorrect_externalDNS_controller_annotation (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_not_admitted_by_the_given_router (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target,_one_ocpRouterName_and_two_router_canonical_names (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_not_admitted_by_any_router (0.10s)
        --- PASS: TestOcpRouteSource/Endpoints/route_with_basic_hostname,_route_status_target_and_ocpRouterName_defined (0.10s)
    --- PASS: TestOcpRouteSource/NewOcpRouteSource (0.00s)
        --- PASS: TestOcpRouteSource/NewOcpRouteSource/invalid_template (0.00s)
        --- PASS: TestOcpRouteSource/NewOcpRouteSource/valid_label_selector (0.10s)
        --- PASS: TestOcpRouteSource/NewOcpRouteSource/non-empty_annotation_filter_label (0.10s)
        --- PASS: TestOcpRouteSource/NewOcpRouteSource/valid_template (0.10s)
        --- PASS: TestOcpRouteSource/NewOcpRouteSource/valid_empty_template (0.10s)
FAIL
FAIL	sigs.k8s.io/external-dns/source	5.510s
FAIL
